// Title:           Cisco Meraki
// Author:          Microsoft
// Version:         1.0
// Last Updated:    12/09/2020
// Comment:         Initial Release
//  
// DESCRIPTION:
// This parser takes raw Cisco Meraki (MX/MR/MS) logs from a Syslog stream and parses the logs into a normalized schema.
//
// USAGE:
// 1. Open Log Analytics/Azure Sentinel Logs blade. Copy the query below and paste into the Logs query window. 
// 2. In the query window, on the second line of the query, enter the hostname(s) of your Cisco Meraki device(s) and any other unique identifiers for the logstream. 
//    For example: | where Computer in ("server1", "server2")
// 3. Click the Save button above the query. A pane will appear on the right, select "as Function" from the drop down. Enter a Function Name.
//    It is recommended to name the Function Alias, as CiscoMeraki
// 4. Kusto Functions can typically take up to 15 minutes to activate. You can then use Function Alias for other queries.
//
// REFERENCES: 
// Using functions in Azure monitor log queries: https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// 
// LOG SAMPLES:
// This parser assumes the raw log are formatted as follows:
//
// 1374543213.342705328 MX84 urls src=192.168.1.186:63735 dst=69.58.188.40:80 mac=58:1F:AA:CE:61:F2 request: GET https://...
// 1374543986.038687615 MX84 flows src=192.168.1.186 dst=8.8.8.8 mac=58:1F:AA:CE:61:F2 protocol=udp sport=55719 dport=53 pattern: allow all
// 1377449842.514782056 MX84 ids-alerts signature=129:4:1 priority=3 timestamp=1377449842.512569 direction=ingress protocol=tcp/ip src=74.125.140.132:80
// 1380664994.337961231 MX84 events type=vpn_connectivity_change vpn_type='site-to-site' peer_contact='98.68.191.209:51856' peer_ident='2814ee002c075181bb1b7478ee073860' connectivity='true'
// 1377448470.246576346 MX84 ids-alerts signature=119:15:1 priority=2 timestamp=1377448470.238064 direction=egress protocol=tcp/ip src=192.168.111.254:56240 signature=1:28423:1 priority=1 timestamp=1468531589.810079 dhost=98:5A:EB:E1:81:2F direction=ingress protocol=tcp/ip src=151.101.52.238:80 dst=192.168.128.2:53023 message: EXPLOIT-KIT Multiple exploit kit single digit exe detection url=http://www.eicar.org/download/eicar.com.txt src=192.168.128.2:53150 dst=188.40.238.250:80 mac=98:5A:EB:E1:81:2F name='EICAR:EICAR_Test_file_not_a_virus-tpd'// 1563249630.774247467 remote_DC1_appliance security_event ids_alerted signature=1:41944:2 priority=1 timestamp=TIMESTAMPEPOCH.647461 dhost=74:86:7A:D9:D7:AA direction=ingress protocol=tcp/ip src=23.6.199.123:80 dst=10.1.10.51:56938 message: BROWSER-IE Microsoft Edge scripting engine security bypass css attempt
// 1380653443.857790533 MR18 events type=device_packet_flood radio='0' state='end' alarm_id='4' reason='left_channel' airmarshal_events type= rogue_ssid_detected ssid='' bssid='02:18:5A:AE:56:00' src='02:18:5A:AE:56:00' dst='02:18:6A:13:09:D0' wired_mac='00:18:0A:AE:56:00' vlan_id='0' channel='157' rssi='21' fc_type='0' fc_subtype='5'
// 1380653443.857790533 MS220_8P events type=8021x_eap_success port='' identity='employee@ikarem.com'
//
//
let LogHeader = <CustomLog>
| extend SyslogMessage = SyslogMessage_s
| where Computer contains ("meraki") // server1 and server2 are examples, replace this list with your Cisco Meraki device(s)
| extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$",dynamic([1,2,3,4]),SyslogMessage)
| mv-expand Parser
| extend Epoch = tostring(Parser[0]),
        DeviceName = tostring(Parser[1]),
        LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
| extend EpochTimestamp = split(Epoch,".")
| extend EventTimestamp = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
| project-away EpochTimestamp, Parser;
let UrlEvents = LogHeader
| where LogType == "urls"
| extend SrcIpAddr = extract(@"src=([0-9\.]+)\:",1,Substring),
        SrcPortNumber = toint(extract(@"src=([0-9\.]+)\:(\d+)\s",2,Substring)),
        DstIpAddr = extract(@"dst=([0-9\.]+)\:",1,Substring),
        DstPortNumber = toint(extract(@"dst=([0-9\.]+)\:(\d+)\s",2,Substring)),
        HttpRequestMethod = extract(@"request: (\w+)\s",1,Substring),
        Url = extract(@"request: (\w+)\s(\S+)",2,Substring)
| project-away Substring;
let FlowEvents = LogHeader
| where LogType contains "flow"
| extend SrcIpAddr = extract(@"src=([0-9\.]+)\s",1,Substring),
        SrcPortNumber = toint(extract(@"sport=(\S+)",1,Substring)),
        SrcMacAddr = tostring(extract(@"mac=(\S+)\s",1,Substring)),
        DstIpAddr = extract(@"dst=([0-9\.]+)\s",1,Substring),
        NetworkProtocol = extract(@"protocol=(\w+)\s",1,Substring),
        DstPortNumber = toint(extract(@"dport=(\S+)",1,Substring)),
        Pattern = extract(@"pattern\: ([\S\s]+)",1,Substring)
| project-away Substring;
let AirMarshallEvents = LogHeader
| where LogType == "airmarshal_events"
| extend EventType = tostring(extract(@"type=(\S+)",1,Substring)),
        Ssid = tostring(extract(@"ssid=\'(\S+)\'",1,Substring)),
        Vap = toint(extract(@"vap=\'(\S+)\'\s",1,Substring)),
        Bssid = tostring(extract(@"bssid=\'(\S+)\'",1,Substring)),
        SrcMacAddr = tostring(extract(@"src=\'(\S+)\'",1,Substring)),
        DstMacAddr = tostring(extract(@"dst=\'(\S+)\'",1,Substring)),
        WiredMacAddr = tostring(extract(@"wired_mac=\'(\S+)\'",1,Substring)),
        Channel = toint(extract(@"channel=\'(\d+)\'",1,Substring)),
        VlanId = toint(extract(@"vlan_id=\'(\d+)\'",1,Substring)),
        Rssi = toint(extract(@"rssi=\'(\d+)\'",1,Substring)),
        FcType = toint(extract(@"fc_type=\'(\S+)\'",1,Substring)),
        FcSubType = toint(extract(@"fc_subtype=\'(\S+)\'",1,Substring))
| project-away Substring;
let SecurityEvents = LogHeader
| where LogType == "security_event"
| extend EventType = tostring(extract(@"^(\S+)\s\w+\:",1,Substring)),
        Signature = tostring(extract(@"signature=(\S+)\s",1,Substring)),
        Url = tostring(extract(@"url=(\S+)\s",1,Substring)),
        Priority = toint(extract(@"priority=(\d+)\s",1,Substring)),
        EventEpoch = tostring(extract(@"timestamp=(\S+)\s",1,Substring)),
        SrcMacAddr = tostring(extract(@"shost=(\S+)\s",1,Substring)),
        DstMacAddr = tostring(extract(@"dhost=(\S+)\s",1,Substring)),
        NetworkDirection = tostring(extract(@"direction=(\S+)",1,Substring)),
        SrcIpAddr = extract(@"src=([0-9\.]+)\:",1,Substring),
        SrcPortNumber = toint(extract(@"src=([0-9\.]+)\:(\d+)",2,Substring)),
        DstIpAddr = extract(@"dst=([0-9\.]+)\:",1,Substring),
        DstPortNumber = toint(extract(@"dst=([0-9\.]+)\:(\d+)",2,Substring)),
        NetworkProtocol = tostring(extract(@"protocol=(\w+)\s",1,Substring)),
        Action = tostring(extract(@"action=(\w+)",1,Substring)),
        Disposition = tostring(extract(@"disposition=(\w+)",1,Substring)),
        Message = tostring(extract(@"message: ([\w\.\-\+\,\s]+)(\s\w+\=)?",1,Substring)),
        Sha256 = tostring(extract(@"sha256(\S+)?",1,Substring))
| extend EventEpochTimestamp = split(EventEpoch,".")
| extend LogTimestamp = unixtime_seconds_todatetime(tolong(EventEpochTimestamp[0]))
| project-away EventEpochTimestamp, Substring;
let IDSAlerts = LogHeader
| where LogType == "ids-alerts"
| extend Signature = tostring(extract(@"signature=(\S+)\s",1,Substring)),
        Priority = toint(extract(@"priority=(\d+)\s",1,Substring)),
        EventEpoch = tostring(extract(@"timestamp=(\S+)\s",1,Substring)),
        NetworkDirection = tostring(extract(@"direction=(\S+)",1,Substring)),
        NetworkProtocol = tostring(extract(@"protocol=(\w+)\s",1,Substring)),
        SrcIpAddr = extract(@"src=([0-9\.]+)\:",1,Substring),
        SrcPortNumber = toint(extract(@"src=([0-9\.]+)\:(\d+)",2,Substring))
| extend EventEpochTimestamp = split(EventEpoch,".")
| extend LogTimestamp = unixtime_seconds_todatetime(tolong(EventEpochTimestamp[0]))
| project-away EventEpochTimestamp, Substring;
let EventLogs = LogHeader
| where LogType == "events"
| extend EventType = tostring(extract(@"type=(\S+)",1,Substring)),
        VpnType = tostring(extract(@"vpn_type=\'(\S+)\'",1,Substring)),
        SrcIpAddr = extract(@"(peer_contact|ip_src)=\'([0-9\.]+)\:",2,Substring),
        SrcPortNumber = toint(extract(@"(peer_contact|ip_src)=\'([0-9\.]+)\:(\d+)\'",3,Substring)),
        PeerIdentity = tostring(extract(@"peer_ident=\'(\S+)\'",1,Substring)),
        Radio = toint(extract(@"radio=\'(\d+)\'",1,Substring)),
        Vap = toint(extract(@"vap=\'(\S+)\'\s",1,Substring)),
        Group = toint(extract(@"group=\'(\S+)?\'",1,Substring)),
        Attribute = toint(extract(@"attr=\'(\S+)?\'",1,Substring)),
        ClientMacAddr = tostring(extract(@"client_mac=\'(\S+)\'",1,Substring)),
        Channel = toint(extract(@"channel=\'(\S+)\'",1,Substring)),
        Reason = toint(extract(@"reason=\'(\S+)\'",1,Substring)),
        AppleDaReason = toint(extract(@"apple_da_reason=\'(\S+)\'",1,Substring)),
        Instigator = toint(extract(@"instigator=\'(\S+)\'",1,Substring)),
        Duration = tostring(extract(@"duration=\'(\S+)\'",1,Substring)),
        FullConn = tostring(extract(@"full_conn=\'(\S+)\'",1,Substring)),
        IpResp = tostring(extract(@"ip_resp=\'(\S+)\'\s",1,Substring)),
        HttpResp = tostring(extract(@"http_resp=\'(\S+)\'",1,Substring)),
        ArpResp = tostring(extract(@"arp_resp=\'(\S+)\'",1,Substring)),
        ArpSrcIpAddr = tostring(extract(@"arp_src=\'(\S+)\'",1,Substring)),
        Connectivity = tostring(extract(@"connectivity=\'(\S+)\'",1,Substring)),
        Rtt = tostring(extract(@"rtt=\'([\w+\.\s]+)\'",1,Substring)),
        UserName = tostring(extract(@"identity=\'(\S+)\'",1,Substring)),
        Aid = tostring(extract(@"aid=\'(\S+)\'",1,Substring)),
        Spi = tostring(extract(@"spi=(\S+)$",1,Substring)),
        DvcMacAddr = tostring(extract(@"device=\'(\S+)\'",1,Substring)),
        State = tostring(extract(@"state=\'(\S+)\'",1,Substring)),
        AlarmId = toint(extract(@"alarm_id=\'(\S+)\'",1,Substring)),
        DosCount = tostring(extract(@"dos_count=\'(\S+)\'",1,Substring)),
        InterArrival = tostring(extract(@"inter_arrival=\'(\S+)\'",1,Substring))
| extend IpAddr = tostring(extract(@"dhcp lease of ip ([\d\.]+)", 1, Substring)),
        ServerMacAddr = tostring(extract(@"server mac ([\w\:]+)", 1, Substring)),
        ClientMacAddr = iif(isempty(ClientMacAddr), tostring(extract(@"client mac ([\w\:]+)", 1, Substring)), ClientMacAddr),
        RouterIpAddr = tostring(extract(@"router ([\d\.]+)", 1, Substring)),
        Subnet = tostring(extract(@"subnet ([\d\.]+)", 1, Substring)),
        Dns = split(extract(@"dns ([\d\.\,\:\s]+)", 1, Substring), ", "),
        SrcPortNumber = iif(isempty(SrcPortNumber), toint(extract(@"port=\'(\S+)\'",1,Substring)), SrcPortNumber)
| extend Dns = iif(Dns[0] == "", "", Dns)
| project-away Substring;
let AllOtherLogs = LogHeader
| where LogType !in ("urls", "airmarshal_events","security_event","ids-alerts", "events") and LogType !contains "flow";
union UrlEvents, FlowEvents, AirMarshallEvents, SecurityEvents, IDSAlerts, EventLogs, AllOtherLogs
