{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "author": "Eli Forbes - v-eliforbes@microsoft.com",
      "comments": "Solution template for CrowdStrike Falcon Endpoint Protection"
    },
    "parameters": {
      "formattedTimeNow": {
        "type": "string",
        "defaultValue": "[utcNow('g')]",
        "metadata": {
          "description": "Appended to workbook displayNames to make them unique"
        }
      },
      "location": {
        "type": "string",
        "minLength": 1,
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
        }
      },
      "workspace-location": {
        "type": "string",
        "minLength": 1,
        "defaultValue": "[parameters('location')]",
        "metadata": {
          "description": "Region to deploy solution resources"
        }
      },
      "workspace": {
        "defaultValue": "<Enter Log Analytics Workspace>",
        "type": "string",
        "minLength": 1,
        "metadata": {
          "description": "Workspace name for Log Analytics where Sentinel is setup"
        }
      },
      "analytic1-id": {
        "type": "string",
        "defaultValue": "[newGuid()]",
        "minLength": 1,
        "metadata": {
          "description": "Unique id for the scheduled alert rule"
        }
      },
      "analytic2-id": {
        "type": "string",
        "defaultValue": "[newGuid()]",
        "minLength": 1,
        "metadata": {
          "description": "Unique id for the scheduled alert rule"
        }
      },
      "workbook1-id": {
        "type": "string",
        "defaultValue": "[newGuid()]",
        "minLength": 1,
        "metadata": {
          "description": "Unique id for the workbook"
        }
      },
      "workbook1-name": {
        "type": "string",
        "defaultValue": "CrowdStrike Falcon Endpoint Protection",
        "minLength": 1,
        "metadata": {
          "description": "Name for the workbook"
        }
      },
      "connectorName": {
        "type": "string",
        "defaultValue": "e44378a1-0b25-470f-bc7f-cc1f55437e6c"
      },
      "connectorName-2": {
        "type": "string",
        "defaultValue": "ace76269-6186-4433-809a-39f440b7ef2d"
      },
      "playbook1-keyvault_Name": {
        "defaultValue": "Crowdstrikekey",
        "type": "string",
        "minLength": 1
      },
      "playbook1-ClientID": {
        "defaultValue": "ClientID",
        "type": "string",
        "minLength": 1
      },
      "playbook1-ClientSecret": {
        "defaultValue": "ClientSecret",
        "type": "string",
        "minLength": 1
      },
      "playbook1-Service_Endpoint": {
        "defaultValue": "https://api.crowdstrike.com",
        "type": "string",
        "minLength": 1
      },
      "playbook1-LogicAppName": {
        "defaultValue": "CrowdStrike_Base",
        "type": "string",
        "minLength": 1
      },
      "playbook2-Playbook_Name": {
        "defaultValue": "Crowdstrike_ContainHost",
        "type": "string",
        "minLength": 1
      },
      "playbook3-Playbook_Name": {
        "defaultValue": "Crowdstrike_Enrichment_GetDeviceInformation",
        "type": "string",
        "minLength": 1
      },
      "playbook4-Playbook_Name": {
        "defaultValue": "Crowdstrike-ResponsefromTeams",
        "type": "string",
        "minLength": 1
      },
      "playbook4-Teams_GroupId": {
        "defaultValue": "TeamgroupId",
        "type": "string",
        "metadata": {
          "description": "GroupId of the Team channel"
        }
      },
      "playbook4-Teams_ChannelId": {
        "defaultValue": "TeamChannelId",
        "type": "string",
        "metadata": {
          "description": "Team ChannelId"
        }
      }
    },
    "variables": {
      "connector-source": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',parameters('connectorName'))]",
      "_connector-source": "[variables('connector-source')]",
      "connector-source-2": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',parameters('connectorName-2'))]",
      "_connector-source-2": "[variables('connector-source-2')]",
      "workbook-source": "[concat(resourceGroup().id, '/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'))]",
      "_workbook-source": "[variables('workbook-source')]",
      "parser-dependency": "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspace'))]",
      "playbook1-keyvault_Connection_Name": "keyvault",
      "playbook-1-connection-2": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/', 'keyvault')]",
      "_playbook-1-connection-2": "[variables('playbook-1-connection-2')]",
      "playbook2-AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('playbook2-Playbook_Name'))]",
      "playbook-2-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/azuresentinel')]",
      "_playbook-2-connection-2": "[variables('playbook-2-connection-2')]",
      "playbook-4-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/teams')]",
      "_playbook-4-connection-2": "[variables('playbook-4-connection-2')]",
      "playbook3-AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('playbook3-Playbook_Name'))]",
      "playbook4-AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('playbook4-Playbook_Name'))]",
      "playbook4-TeamsConnectionName": "[concat('teamsconnector-', parameters('playbook4-Playbook_Name'))]"
    },
    "resources": [
      {
        "name": "pid-e73b7985-462c-4cc7-922e-ffa9e9254759-partnercenter",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "properties": {
          "mode": "Incremental",
          "template": {
            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "resources": []
          }
        }
      },
      {
        "id": "[variables('_connector-source')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('connectorName'))]",
        "apiVersion": "2021-03-01-preview",
        "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
        "kind": "GenericUI",
        "properties": {
          "connectorUiConfig": {
            "title": "CrowdStrike Falcon Endpoint Protection",
            "publisher": "CrowdStrike",
            "descriptionMarkdown": "The [CrowdStrike Falcon Endpoint Protection](https://www.crowdstrike.com/endpoint-security-products/) connector allows you to easily connect your CrowdStrike Falcon Event Stream with Azure Sentinel, to create custom dashboards, alerts, and improve investigation. This gives you more insight into your organization's endpoints and improves your security operation capabilities.",
            "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected [**CrowdStrikeFalconEventStream**](https://aka.ms/sentinel-crowdstrikefalconendpointprotection-parser) which is deployed with the Azure Sentinel Solution.",
            "graphQueriesTableName": "CrowdStrikeFalconEventStream",
            "graphQueries": [
              {
                "metricName": "Total data received",
                "legend": "{{graphQueriesTableName}}",
                "baseQuery": "CommonSecurityLog_CL \n| where DeviceVendor_s == \"CrowdStrike\" and DeviceProduct_s == \"FalconHost\""
              }
            ],
            "sampleQueries": [
              {
                "description": "Top 10 Hosts with Detections",
                "query": "{{graphQueriesTableName}} \n | where EventType_s == \"DetectionSummaryEvent\" \n| summarize count() by DstHostName_s \n | top 10 by count_"
              },
              {
                "description": "Top 10 Users with Detections",
                "query": "{{graphQueriesTableName}} \n | where EventType_s == \"DetectionSummaryEvent\" \n| summarize count() by DstUserName_s \n | top 10 by count_"
              }
            ],
            "dataTypes": [
              {
                "name": "CommonSecurityLog (CrowdStrikeFalconEventStream)",
                "lastDataReceivedQuery": "CommonSecurityLog_CL \n| where DeviceVendor_s == \"CrowdStrike\" and DeviceProduct_s == \"FalconHost\"\n | summarize Time = max(TimeGenerated)\n | where isnotempty(Time)"
              }
            ],
            "connectivityCriterias": [
              {
                "type": "IsConnectedQuery",
                "value": [
                  "CommonSecurityLog_CL \n| where DeviceVendor_s == \"CrowdStrike\" and DeviceProduct_s == \"FalconHost\"\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(30d)"
                ]
              }
            ],
            "availability": {
              "status": 1,
              "isPreview": true
            },
            "permissions": {
              "resourceProvider": [
                {
                  "provider": "Microsoft.OperationalInsights/workspaces",
                  "permissionsDisplayText": "read and write permissions are required.",
                  "providerDisplayName": "Workspace",
                  "scope": "Workspace",
                  "requiredPermissions": {
                    "read": true,
                    "write": true,
                    "delete": true
                  }
                },
                {
                  "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                  "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                  "providerDisplayName": "Keys",
                  "scope": "Workspace",
                  "requiredPermissions": {
                    "action": true
                  }
                }
              ]
            },
            "instructionSteps": [
              {
                "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected [**CrowdStrikeFalconEventStream**](https://aka.ms/sentinel-crowdstrikefalconendpointprotection-parser) which is deployed with the Azure Sentinel Solution."
              },
              {
                "title": "1. Linux Syslog agent configuration",
                "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Azure Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
                "innerSteps": [
                  {
                    "title": "1.1 Select or create a Linux machine",
                    "description": "Select or create a Linux machine that Azure Sentinel will use as the proxy between your security solution and Azure Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                  },
                  {
                    "title": "1.2 Install the CEF collector on the Linux machine",
                    "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Azure Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                    "instructions": [
                      {
                        "parameters": {
                          "fillWith": [
                            "WorkspaceId",
                            "PrimaryKey"
                          ],
                          "label": "Run the following command to install and apply the CEF collector:",
                          "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                        },
                        "type": "CopyableLabel"
                      }
                    ]
                  }
                ]
              },
              {
                "title": "2. Forward CrowdStrike Falcon Event Stream logs to a Syslog agent",
                "description": "Deploy the CrowdStrike Falcon SIEM Collector to forward Syslog messages in CEF format to your Azure Sentinel workspace via the Syslog agent.\n1. [Follow these instructions](https://www.crowdstrike.com/blog/tech-center/integrate-with-your-siem/) to deploy the SIEM Collector and forward syslog\n2. Use the IP address or hostname for the Linux device with the Linux agent installed as the Destination IP address."
              },
              {
                "title": "3. Validate connection",
                "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine",
                "instructions": [
                  {
                    "parameters": {
                      "fillWith": [
                        "WorkspaceId"
                      ],
                      "label": "Run the following command to validate your connectivity:",
                      "value": "sudo wget -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                    },
                    "type": "CopyableLabel"
                  }
                ]
              },
              {
                "title": "4. Secure your machine ",
                "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)"
              }
            ]
          }
        }
      },
      {
        "id": "[variables('_connector-source-2')]",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('connectorName-2'))]",
        "apiVersion": "2021-03-01-preview",
        "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
        "kind": "GenericUI",
        "properties": {
          "connectorUiConfig": {
            "title": "CrowdStrike Falcon Data Replicator",
            "publisher": "CrowdStrike",
            "descriptionMarkdown": "The [Crowdstrike](https://www.crowdstrike.com/) Falcon Data Replicator connector provides the capability to ingest raw event data from the [Falcon Platform](https://www.crowdstrike.com/blog/tech-center/intro-to-falcon-data-replicator/) events into Azure Sentinel. The connector provides ability to get events from Falcon Agents which helps to examine potential security risks, analyze your team's use of collaboration, diagnose configuration problems and more.",
            "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on a Kusto Function to work as expected [**CrowdstrikeReplicator**](https://aka.ms/sentinel-crowdstrikereplicator-parser) which is deployed with the Azure Sentinel Solution.",
            "graphQueriesTableName": "CrowdstrikeReplicatorLogs_CL",
            "graphQueries": [
              {
                "metricName": "Total data received",
                "legend": "CrowdstrikeReplicatorLogs_CL",
                "baseQuery": "CrowdstrikeReplicatorLogs_CL"
              }
            ],
            "sampleQueries": [
              {
                "description": "Data Replicator - All Activities",
                "query": "CrowdstrikeReplicator\n | sort by TimeGenerated desc"
              }
            ],
            "dataTypes": [
              {
                "name": "CrowdstrikeReplicatorLogs_CL",
                "lastDataReceivedQuery": "CrowdstrikeReplicatorLogs_CL\n | summarize Time = max(TimeGenerated)\n | where isnotempty(Time)"
              }
            ],
            "connectivityCriterias": [
              {
                "type": "IsConnectedQuery",
                "value": [
                  "CrowdstrikeReplicatorLogs_CL\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(30d)"
                ]
              }
            ],
            "availability": {
              "status": 1,
              "isPreview": true
            },
            "permissions": {
              "resourceProvider": [
                {
                  "provider": "Microsoft.OperationalInsights/workspaces",
                  "permissionsDisplayText": "read and write permissions on the workspace are required.",
                  "providerDisplayName": "Workspace",
                  "scope": "Workspace",
                  "requiredPermissions": {
                    "write": true,
                    "read": true,
                    "delete": true
                  }
                },
                {
                  "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                  "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                  "providerDisplayName": "Keys",
                  "scope": "Workspace",
                  "requiredPermissions": {
                    "action": true
                  }
                }
              ],
              "customs": [
                {
                  "name": "Microsoft.Web/sites permissions",
                  "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                },
                {
                  "name": "SQS and AWS S3 account credentials/permissions",
                  "description": "**AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL** is required.  [See the documentation to learn more about data pulling](https://www.crowdstrike.com/blog/tech-center/intro-to-falcon-data-replicator/). To start, contact CrowdStrike support. At your request they will create a CrowdStrike managed Amazon Web Services (AWS) S3 bucket for short term storage purposes as well as a SQS (simple queue service) account for monitoring changes to the S3 bucket."
                }
              ]
            },
            "instructionSteps": [
              {
                "description": ">**NOTE:** This connector uses Azure Functions to connect to the S3 bucket to pull logs into Azure Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
              },
              {
                "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
              },
              {
                "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected [**CrowdstrikeReplicator**](https://aka.ms/sentinel-crowdstrikereplicator-parser) which is deployed with the Azure Sentinel Solution."
              },
              {
                "description": "**STEP 1 - Contact CrowdStrike support to obtain the credentials and Queue URL.**\n"
              },
              {
                "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Crowdstrike Falcon Data Replicator connector, have the Workspace ID and Workspace Primary Key (can be copied from the following).",
                "instructions": [
                  {
                    "parameters": {
                      "fillWith": [
                        "WorkspaceId"
                      ],
                      "label": "Workspace ID"
                    },
                    "type": "CopyableLabel"
                  },
                  {
                    "parameters": {
                      "fillWith": [
                        "PrimaryKey"
                      ],
                      "label": "Primary Key"
                    },
                    "type": "CopyableLabel"
                  }
                ]
              },
              {
                "title": "Option 1 - Azure Resource Manager (ARM) Template",
                "description": "Use this method for automated deployment of the Crowdstrike Falcon Data Replicator connector using an ARM Tempate.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-CrowdstrikeReplicator-azuredeploy)\n2. Select the preferred **AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL**. \n> **NOTE:** Within the same resource group, you can't mix Windows and Linux apps in the same region. Select existing resource group without Windows apps in it or create new resource group.\n3. Enter the **AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL** and deploy. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy."
              },
              {
                "title": "Option 2 - Manual Deployment of Azure Functions",
                "description": "Use the following step-by-step instructions to deploy the Crowdstrike Falcon Data Replicator connector manually with Azure Functions (Deployment via Visual Studio Code)."
              },
              {
                "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-CrowdstrikeReplicator-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. CrowdstrikeReplicatorXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Azure Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
              },
              {
                "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select ** New application setting**.\n3. Add each of the following application settings individually, with their respective string values (case-sensitive): \n\t\tAWS_KEY\n\t\tAWS_SECRET\n\t\tAWS_REGION_NAME\n\t\tQUEUE_URL\n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tlogAnalyticsUri (optional)\n> - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`.\n4. Once all application settings have been entered, click **Save**."
              }
            ]
          }
        }
      },
      {
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic1-id'))]",
        "apiVersion": "2020-01-01",
        "kind": "Scheduled",
        "location": "[parameters('workspace-location')]",
        "properties": {
          "description": "Creates an incident when a large number of Critical/High severity CrowdStrike Falcon sensor detections is triggered by a single user",
          "displayName": "Critical or High Severity Detections by User",
          "enabled": false,
          "query": "let timeframe = 1h;\n let threshold = 15; // update threshold value based on organization's preference\n let NoteableEvents = CrowdStrikeFalconEventStream\n | where TimeGenerated > ago(timeframe)\n | where EventType == \"DetectionSummaryEvent\"\n | where Severity in (\"Critical\", \"High\")\n | summarize Total = count() by DstUserName\n | where Total > threshold;\n CrowdStrikeFalconEventStream\n | where TimeGenerated > ago(timeframe)\n | where EventType == \"DetectionSummaryEvent\"\n | where Severity in (\"Critical\", \"High\")\n | join kind=inner (NoteableEvents) on DstUserName\n | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Total = count() by DstHostName, SrcIpAddr, DstUserName, FileName, FileHash, Message\n | extend timestamp = StartTimeUtc, AccountCustomEntity = DstUserName, HostCustomEntity = DstHostName, IPCustomEntity = SrcIpAddr, FileHashCustomEntity = FileHash",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "severity": "High",
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0
        }
      },
      {
        "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
        "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic2-id'))]",
        "apiVersion": "2020-01-01",
        "kind": "Scheduled",
        "location": "[parameters('workspace-location')]",
        "properties": {
          "description": "Creates an incident when a CrowdStrike Falcon sensor detection is triggered with a Critical Severity",
          "displayName": "Critical Severity Detection",
          "enabled": false,
          "query": "let timeframe = 1h;\n CrowdStrikeFalconEventStream\n | where TimeGenerated > ago(timeframe)\n | where EventType == \"DetectionSummaryEvent\"\n | where Severity == \"Critical\"\n | summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Total = count() by DstHostName, SrcIpAddr, DstUserName, Activity, Technique, FileName, FilePath, FileHash, Message\n | extend timestamp = StartTimeUtc, AccountCustomEntity = DstUserName, HostCustomEntity = DstHostName, IPCustomEntity = SrcIpAddr, FileHashCustomEntity = FileHash",
          "queryFrequency": "PT1H",
          "queryPeriod": "PT1H",
          "severity": "High",
          "suppressionDuration": "PT1H",
          "suppressionEnabled": false,
          "triggerOperator": "GreaterThan",
          "triggerThreshold": 0
        }
      },
      {
        "type": "Microsoft.OperationalInsights/workspaces",
        "apiVersion": "2020-08-01",
        "name": "[parameters('workspace')]",
        "location": "[parameters('workspace-location')]",
        "resources": [
          {
            "type": "savedSearches",
            "apiVersion": "2020-08-01",
            "name": "CrowdStrike Falcon Endpoint Protection Parser",
            "dependsOn": [
              "[variables('parser-dependency')]"
            ],
            "properties": {
              "eTag": "*",
              "displayName": "CrowdStrike Falcon Endpoint Protection Parser",
              "category": "Samples",
              "functionAlias": "CrowdStrikeFalconEventStream",
              "query": "\nCommonSecurityLog_CL\n| extend DeviceVendor = DeviceVendor_s\n| extend DeviceProduct = DeviceProduct_s\n| extend AdditionalExtensions = AdditionalExtensions_s\n| extend DeviceCustomNumber1Label = DeviceCustomNumber1Label_s\n| extend DeviceCustomNumber1 = DeviceCustomNumber1_s\n| extend DeviceCustomNumber2Label = DeviceCustomNumber2Label_s\n| extend DeviceCustomNumber2 = DeviceCustomNumber2_s\n| extend DeviceCustomNumber3Label =DeviceCustomNumber3Label_s\n| extend DeviceCustomNumber3 = DeviceCustomNumber3_s\n| extend DeviceCustomDate1Label = DeviceCustomDate1Label_s\n| extend DeviceCustomDate1 = DeviceCustomDate1_s\n| extend DeviceCustomDate2 = DeviceCustomDate2_s\n| extend DeviceCustomDate2Label = DeviceCustomDate2Label_s\n| extend DeviceCustomString1Label = DeviceCustomString1Label_s\n| extend DeviceCustomString1 = DeviceCustomString1_s\n| extend DeviceCustomString2Label = DeviceCustomString2Label_s\n| extend DeviceCustomString2 = DeviceCustomString2_s\n| extend DeviceCustomString3Label = DeviceCustomString3Label_s\n| extend DeviceCustomString3 = DeviceCustomString3_s\n| extend DeviceCustomString4Label = DeviceCustomString4Label_s\n| extend DeviceCustomString4 = DeviceCustomString4_s\n| extend DeviceCustomString5Label = DeviceCustomString5Label_s\n| extend DeviceCustomString5 = DeviceCustomString5_s\n| extend DeviceCustomString6Label = DeviceCustomString6Label_s\n| extend DeviceCustomString6 = DeviceCustomString6_s\n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\n| extend EventType = extract(@\"cat=([^;]+)(\\;|$)\",1,AdditionalExtensions),\n         Outcome = extract(@\"outcome=([^;]+)(\\;|$)\",1,AdditionalExtensions),\n         Technique = extract(@\"reason=([^;]+)(\\;|$)\",1,AdditionalExtensions),\n         PatternDisposition = extract(@\"CSMTRPatternDisposition=([^;]+)(\\;|$)\",1,AdditionalExtensions),\n         SessionStartTime = unixtime_seconds_todatetime(toint(extract(@\"sessionStartTimestamp=([^;]+)(\\;|$)\",1,AdditionalExtensions))),\n         SessionEndTime = unixtime_seconds_todatetime(toint(extract(@\"sessionEndTimestamp=([^;]+)(\\;|$)\",1,AdditionalExtensions)))\n| extend ParentProcessId = iif(DeviceCustomNumber1Label == \"ParentProcessId\" , DeviceCustomNumber1, tostring(\"\")),\n         ChildProcessId = iif(DeviceCustomNumber2Label == \"ProcessId\" , DeviceCustomNumber2, tostring(\"\")),\n         Offset = iif(DeviceCustomNumber3Label == \"Offset\", DeviceCustomNumber3, tostring(\"\"))\n| project-away DeviceCustomNumber1Label, DeviceCustomNumber1,DeviceCustomNumber2Label, DeviceCustomNumber2,DeviceCustomNumber3Label, DeviceCustomNumber3\n| extend EventTimestamp = iif(DeviceCustomDate1Label == \"Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\n         ExeWrittenTime = iif(DeviceCustomDate1Label == \"ExeWrittenTimestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\n         DnsRequestTime = iif(DeviceCustomDate1Label == \"DNS Request Time\", todatetime(DeviceCustomDate1), todatetime(\"\")),\n         NetworkAccessTime = iif(DeviceCustomDate1Label == \"Network Access Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\n         DocAccessTime = iif(DeviceCustomDate1Label == \"DocAccessTimestamp\" or DeviceCustomDate1Label == \"Document Accessed Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\n         HashSpreadingEventTime = iif(DeviceCustomDate2Label == \"HashSpreadingEventTime\", todatetime(DeviceCustomDate2), todatetime(\"\")),\n         HashSpreadingSensorTime = iif(DeviceCustomDate2Label == \"HashSpreadingSensorEventTime\", todatetime(DeviceCustomDate2), todatetime(\"\"))\n| project-away DeviceCustomDate1Label, DeviceCustomDate1, DeviceCustomDate2Label, DeviceCustomDate2\n| extend ScanResultName = iif(DeviceCustomString1Label == \"ScanResultNam\", DeviceCustomString1, \"\"),\n         WrittenExeFileName = iif(DeviceCustomString2Label == \"WrittenExeFileName\", DeviceCustomString2, \"\"),\n         QuarantineFileSHA256 = iif(DeviceCustomString2Label == \"QuarantineFileSHA256\", DeviceCustomString2, \"\"),\n         ScanResultEngine = iif(DeviceCustomString2Label == \"ScanResultEngine\", DeviceCustomString2, \"\"),\n         AccessedDocFileName = iif(DeviceCustomString2Label == \"AccessedDocFileName\", DeviceCustomString2, \"\"),\n         WrittenExeFilePath = iif(DeviceCustomString3Label == \"WrittenExeFilePath\", DeviceCustomString3, \"\"),\n         AccessedDocFilePath = iif(DeviceCustomString3Label == \"AccessedDocFilePath\", DeviceCustomString3, \"\"),\n         QuarantineFilePath = iif(DeviceCustomString3Label == \"QuarantineFilePath\", DeviceCustomString3, \"\"),\n         ScanResultVersion = iif(DeviceCustomString4Label == \"ScanResultVersion\", DeviceCustomString4, \"\"),\n         CommandLine = iif(DeviceCustomString5Label == \"CommandLine\", DeviceCustomString5, \"\"),\n         FalconHostLink = iif(DeviceCustomString6Label == \"FalconHostLink\", DeviceCustomString6, \"\")\n| project-away DeviceCustomString1Label, DeviceCustomString1, DeviceCustomString2Label, DeviceCustomString2, DeviceCustomString3Label, DeviceCustomString3, DeviceCustomString4Label, DeviceCustomString4, DeviceCustomString5Label, DeviceCustomString5, DeviceCustomString6Label, DeviceCustomString6\n| project-rename DstHostName = DestinationHostName_s,\n         DstNtDomain = DestinationNTDomain_s,\n         DstUserName = DestinationUserName_s,\n         DstIpAddr = DestinationTranslatedAddress_s,\n         SrcMacAddr = SourceMACAddress_s,\n         SrcIpAddr = SourceIP\n| extend EventType = iif(DeviceEventClassID_s == \"DetectionSummaryEvent\" or DeviceEventClassID_s contains \"Detection Summary Event\", \"DetectionSummaryEvent\", EventType), \n         ReceiptTime = unixtime_milliseconds_todatetime(tolong(ReceiptTime_s)),\n         SensorId = extract(@\"/detail/([^/]+)\\/\",1,FalconHostLink),\n         Severity = case(LogSeverity_s == 1, \"Informational\",\n                         LogSeverity_s == 2, \"Low\",\n                         LogSeverity_s == 3, \"Medium\",\n                         LogSeverity_s == 4, \"High\",\n                         LogSeverity_s == 5, \"Critical\",\n                         LogSeverity_s)",
              "version": 1
            }
          },
          {
            "type": "savedSearches",
            "apiVersion": "2020-08-01",
            "name": "CrowdStrike Replicator Parser",
            "dependsOn": [
              "[variables('parser-dependency')]"
            ],
            "properties": {
              "eTag": "*",
              "displayName": "CrowdStrike Replicator Parser",
              "category": "Samples",
              "functionAlias": "CrowdstrikeReplicator",
              "query": "\nlet CrowdstrikeReplicatorLogs_view  = view () { \n    CrowdstrikeReplicatorLogs_CL\n    | extend \n                EventVendor=\"Crowdstrike\",\n                EventProduct=\"Replicator\",\n                FileMode=column_ifexists('FileMode_s', ''),\n                DeviceSerialNumber=column_ifexists('DeviceSerialNumber_s', ''),\n                IcmpCode=column_ifexists('IcmpCode_s', ''),\n                IcmpType=column_ifexists('IcmpType_s', ''),\n                LastUpdateInstalledTime=column_ifexists('LastUpdateInstalledTime_s', ''),\n                RebootRequired=column_ifexists('RebootRequired_s', ''),\n                PendingUpdateIds=column_ifexists('PendingUpdateIds_s', ''),\n                InstalledUpdateIds=column_ifexists('InstalledUpdateIds_s', ''),\n                InstalledUpdateExtendedStatus=column_ifexists('InstalledUpdateExtendedStatus_s', ''),\n                SupersededUpdateIds=column_ifexists('SupersededUpdateIds_s', ''),\n                ConfigurationDescriptorValue=column_ifexists('ConfigurationDescriptorValue_s', ''),\n                ConfigurationDescriptorAttributes=column_ifexists('ConfigurationDescriptorAttributes_s', ''),\n                DeviceDescriptorUniqueIdentifier=column_ifexists('DeviceDescriptorUniqueIdentifier_s', ''),\n                ConfigurationDescriptorName=column_ifexists('ConfigurationDescriptorName_s', ''),\n                ConfigurationDescriptorNumInterfaces=column_ifexists('ConfigurationDescriptorNumInterfaces_s', ''),\n                ConfigurationDescriptorMaxPowerDraw=column_ifexists('ConfigurationDescriptorMaxPowerDraw_s', ''),\n                ScreenshotsTakenCount=column_ifexists('ScreenshotsTakenCount_s', ''),\n                ExitCode=column_ifexists('ExitCode_s', ''),\n                ParentProcessId=column_ifexists('ParentProcessId_s', ''),\n                DstUserIdentity=column_ifexists('UserSid_s', ''),\n                NetworkListenCount=column_ifexists('NetworkListenCount_s', ''),\n                SuspiciousRawDiskReadCount=column_ifexists('SuspiciousRawDiskReadCount_s', ''),\n                NetworkBindCount=column_ifexists('NetworkBindCount_s', ''),\n                NetworkRecvAcceptCount=column_ifexists('NetworkRecvAcceptCount_s', ''),\n                ContextData=column_ifexists('ContextData_s', ''),\n                Id=column_ifexists('id_g', ''),\n                NewExecutableWrittenCount=column_ifexists('NewExecutableWrittenCount_s', ''),\n                ExeAndServiceCount=column_ifexists('ExeAndServiceCount_s', ''),\n                NetworkCloseCount=column_ifexists('NetworkCloseCount_s', ''),\n                SuspectStackCount=column_ifexists('SuspectStackCount_s', ''),\n                CLICreationCount=column_ifexists('CLICreationCount_s', ''),\n                UnsignedModuleLoadCount=column_ifexists('UnsignedModuleLoadCount_s', ''),\n                UserTime=column_ifexists('UserTime_s', ''),\n                EventMessage=column_ifexists('event_simpleName_s', ''),\n                RawProcessId=column_ifexists('RawProcessId_s', ''),\n                ContextTimeStamp=column_ifexists('ContextTimeStamp_s', ''),\n                AllocateVirtualMemoryCount=column_ifexists('AllocateVirtualMemoryCount_s', ''),\n                ContextProcessId=column_ifexists('ContextProcessId_s', ''),\n                ServiceEventCount=column_ifexists('ServiceEventCount_s', ''),\n                SnapshotFileOpenCount=column_ifexists('SnapshotFileOpenCount_s', ''),\n                RemovableDiskFileWrittenCount=column_ifexists('RemovableDiskFileWrittenCount_s', ''),\n                InjectedDllCount=column_ifexists('InjectedDllCount_s', ''),\n                ModuleLoadCount=column_ifexists('ModuleLoadCount_s', ''),\n                UserMemoryProtectExecutableCount=column_ifexists('UserMemoryProtectExecutableCount_s', ''),\n                NetworkCapableAsepWriteCount=column_ifexists('NetworkCapableAsepWriteCount_s', ''),\n                TargetProcessId=column_ifexists('TargetProcessId_s', ''),\n                DnsRequestCount=column_ifexists('DnsRequestCount_s', ''),\n                ArchiveFileWrittenCount=column_ifexists('ArchiveFileWrittenCount_s', ''),\n                Entitlements=column_ifexists('Entitlements_s', ''),\n                Name=column_ifexists('name_s', ''),\n                ProcessStartTime=column_ifexists('ProcessStartTime_s', ''),\n                SetThreadContextCount=column_ifexists('SetThreadContextCount_s', ''),\n                SuspiciousCredentialModuleLoadCount=column_ifexists('SuspiciousCredentialModuleLoadCount_s', ''),\n                DvcInterfaceGuid=column_ifexists('aid_g', ''),\n                Cid=column_ifexists('cid_g', ''),\n                FileDeletedCount=column_ifexists('FileDeletedCount_s', ''),\n                UserMemoryAllocateExecutableCount=column_ifexists('UserMemoryAllocateExecutableCount_s', ''),\n                DirectoryCreatedCount=column_ifexists('DirectoryCreatedCount_s', ''),\n                NetworkConnectCountUdp=column_ifexists('NetworkConnectCountUdp_s', ''),\n                QueueApcCount=column_ifexists('QueueApcCount_s', ''),\n                ContextThreadId=column_ifexists('ContextThreadId_s', ''),\n                Aip=column_ifexists('aip_s', ''),\n                SuspiciousFontLoadCount=column_ifexists('SuspiciousFontLoadCount_s', ''),\n                ConHostId=column_ifexists('ConHostId_s', ''),\n                NetworkConnectCount=column_ifexists('NetworkConnectCount_s', ''),\n                BinaryExecutableWrittenCount=column_ifexists('BinaryExecutableWrittenCount_s', ''),\n                CycleTime=column_ifexists('CycleTime_s', ''),\n                DvcOs=column_ifexists('event_platform_s', ''),\n                ConHostProcessId=column_ifexists('ConHostProcessId_s', ''),\n                PrivilegedProcessHandleCount=column_ifexists('PrivilegedProcessHandleCount_s', ''),\n                MaxThreadCount=column_ifexists('MaxThreadCount_s', ''),\n                ImageSubsystem=column_ifexists('ImageSubsystem_s', ''),\n                GenericFileWrittenCount=column_ifexists('GenericFileWrittenCount_s', ''),\n                EffectiveTransmissionClass=column_ifexists('EffectiveTransmissionClass_s', ''),\n                ScriptEngineInvocationCount=column_ifexists('ScriptEngineInvocationCount_s', ''),\n                RunDllInvocationCount=column_ifexists('RunDllInvocationCount_s', ''),\n                timestamp=column_ifexists('timestamp_s', ''),\n                CreateProcessCount=column_ifexists('CreateProcessCount_s', ''),\n                KernelTime=column_ifexists('KernelTime_s', ''),\n                DirectoryEnumeratedCount=column_ifexists('DirectoryEnumeratedCount_s', ''),\n                ConfigStateHash=column_ifexists('ConfigStateHash_s', ''),\n                AsepWrittenCount=column_ifexists('AsepWrittenCount_s', ''),\n                SuspiciousDnsRequestCount=column_ifexists('SuspiciousDnsRequestCount_s', ''),\n                DocumentFileWrittenCount=column_ifexists('DocumentFileWrittenCount_s', ''),\n                ProtectVirtualMemoryCount=column_ifexists('ProtectVirtualMemoryCount_s', ''),\n                ProcessHashSha256=column_ifexists('SHA256HashData_s', ''),\n                UserMemoryProtectExecutableRemoteCount=column_ifexists('UserMemoryProtectExecutableRemoteCount_s', ''),\n                ConfigBuild=column_ifexists('ConfigBuild_s', ''),\n                UserMemoryAllocateExecutableRemoteCount=column_ifexists('UserMemoryAllocateExecutableRemoteCount_s', ''),\n                ExecutableDeletedCount=column_ifexists('ExecutableDeletedCount_s', ''),\n                RegKeySecurityDecreasedCount=column_ifexists('RegKeySecurityDecreasedCount_s', ''),\n                InjectedThreadCount=column_ifexists('InjectedThreadCount_s', ''),\n                NetworkModuleLoadCount=column_ifexists('NetworkModuleLoadCount_s', ''),\n                WindowTitle=column_ifexists('WindowTitle_s', ''),\n                ProcessCreateFlags=column_ifexists('ProcessCreateFlags_s', ''),\n                IntegrityLevel=column_ifexists('IntegrityLevel_s', ''),\n                SourceProcessId=column_ifexists('SourceProcessId_s', ''),\n                ProcessHashSha1=column_ifexists('SHA1HashData_s', ''),\n                TokenType=column_ifexists('TokenType_s', ''),\n                ProcessEndTime=column_ifexists('ProcessEndTime_s', ''),\n                AuthenticodeHashData=column_ifexists('AuthenticodeHashData_s', ''),\n                ParentBaseFileName=column_ifexists('ParentBaseFileName_s', ''),\n                SessionId=column_ifexists('SessionId_s', ''),\n                Tags=column_ifexists('Tags_s', ''),\n                ProcessHashMd5=column_ifexists('MD5HashData_g', ''),\n                ProcessSxsFlags=column_ifexists('ProcessSxsFlags_s', ''),\n                AuthenticationId=column_ifexists('AuthenticationId_s', ''),\n                WindowFlags=column_ifexists('WindowFlags_s', ''),\n                ProcessCommandLine=column_ifexists('CommandLine_s', ''),\n                ParentAuthenticationId=column_ifexists('ParentAuthenticationId_s', ''),\n                FileName=column_ifexists('ImageFileName_s', ''),\n                SourceThreadId=column_ifexists('SourceThreadId_s', ''),\n                ProcessParameterFlags=column_ifexists('ProcessParameterFlags_s', ''),\n                SignInfoFlags=column_ifexists('SignInfoFlags_s', ''),\n                ChannelVersion=column_ifexists('ChannelVersion_s', ''),\n                ChannelVersionRequired=column_ifexists('ChannelVersionRequired_s', ''),\n                ChannelId=column_ifexists('ChannelId_s', ''),\n                DnsResponseType=column_ifexists('DnsResponseType_s', ''),\n                IP4Records=column_ifexists('IP4Records_s', ''),\n                CNAMERecords=column_ifexists('CNAMERecords_s', ''),\n                QueryStatus=column_ifexists('QueryStatus_s', ''),\n                InterfaceIndex=column_ifexists('InterfaceIndex_s', ''),\n                DualRequest=column_ifexists('DualRequest_s', ''),\n                FirstIP4Record=column_ifexists('FirstIP4Record_s', ''),\n                UrlDomain=column_ifexists('DomainName_s', ''),\n                RespondingDnsServer=column_ifexists('RespondingDnsServer_s', ''),\n                RequestType=column_ifexists('RequestType_s', ''),\n                FirewallRuleId=column_ifexists('FirewallRuleId_s', ''),\n                Options=column_ifexists('Options_s', ''),\n                MinorFunction=column_ifexists('MinorFunction_s', ''),\n                FileIdentifier=column_ifexists('FileIdentifier_s', ''),\n                Information=column_ifexists('Information_s', ''),\n                ShareAccess=column_ifexists('ShareAccess_s', ''),\n                FileObject=column_ifexists('FileObject_s', ''),\n                FilePermission=column_ifexists('FileAttributes_s', ''),\n                Status=column_ifexists('Status_s', ''),\n                IrpFlags=column_ifexists('IrpFlags_s', ''),\n                MajorFunction=column_ifexists('MajorFunction_s', ''),\n                DesiredAccess=column_ifexists('DesiredAccess_s', ''),\n                OperationFlags=column_ifexists('OperationFlags_s', ''),\n                TargetFileName=column_ifexists('TargetFileName_s', ''),\n                CallStackModuleNamesVersion=column_ifexists('CallStackModuleNamesVersion_s', ''),\n                CsaProcessDataCollectionInstanceId=column_ifexists('CsaProcessDataCollectionInstanceId_s', ''),\n                CallStackModuleNames=column_ifexists('CallStackModuleNames_s', ''),\n                CreateProcessType=column_ifexists('CreateProcessType_s', ''),\n                EtwRawProcessId=column_ifexists('EtwRawProcessId_s', ''),\n                EventMax=column_ifexists('EventMax_s', ''),\n                EtwRawThreadId=column_ifexists('EtwRawThreadId_s', ''),\n                Flags=column_ifexists('Flags_s', ''),\n                EventMin=column_ifexists('EventMin_s', ''),\n                RawThreadId=column_ifexists('RawThreadId_s', ''),\n                SrcIpAddr=column_ifexists('LocalAddressIP4_s', ''),\n                ConnectionFlags=column_ifexists('ConnectionFlags_s', ''),\n                DstIpPort=column_ifexists('RemotePort_s', ''),\n                SrcIpPort=column_ifexists('LocalPort_s', ''),\n                Protocol=column_ifexists('Protocol_s', ''),\n                DstIpAddr=column_ifexists('RemoteAddressIP4_s', ''),\n                ConnectionDirection=column_ifexists('ConnectionDirection_s', ''),\n                InContext=column_ifexists('InContext_s', ''),\n                NetworkContainmentState=column_ifexists('NetworkContainmentState_s', ''),\n                ConfigIDBase=column_ifexists('ConfigIDBase_s', ''),\n                SensorStateBitMap=column_ifexists('SensorStateBitMap_s', ''),\n                ConfigurationVersion=column_ifexists('ConfigurationVersion_s', ''),\n                ConfigIDPlatform=column_ifexists('ConfigIDPlatform_s', ''),\n                ConfigIDBuild=column_ifexists('ConfigIDBuild_s', ''),\n                ProvisionState=column_ifexists('ProvisionState_s', ''),\n                Size=column_ifexists('Size_s', ''),\n                IsOnNetwork=column_ifexists('IsOnNetwork_s', ''),\n                DiskParentDeviceInstanceId=column_ifexists('DiskParentDeviceInstanceId_s', ''),\n                TemporaryFileName=column_ifexists('TemporaryFileName_s', ''),\n                FileEcpBitmask=column_ifexists('FileEcpBitmask_s', ''),\n                IsOnRemovableDisk=column_ifexists('IsOnRemovableDisk_s', ''),\n                ModuleCharacteristics=column_ifexists('ModuleCharacteristics_s', ''),\n                OriginalEventTimeStamp=column_ifexists('OriginalEventTimeStamp_s', ''),\n                MappedFromUserMode=column_ifexists('MappedFromUserMode_s', ''),\n                TreeId=column_ifexists('TreeId_s', ''),\n                PrimaryModule=column_ifexists('PrimaryModule_s', ''),\n                UserIsAdmin=column_ifexists('UserIsAdmin_s', ''),\n                LogoffTime=column_ifexists('LogoffTime_s', ''),\n                LogonTime=column_ifexists('LogonTime_s', ''),\n                LogonDomain=column_ifexists('LogonDomain_s', ''),\n                RemoteAccount=column_ifexists('RemoteAccount_s', ''),\n                UserFlags=column_ifexists('UserFlags_s', ''),\n                LogonServer=column_ifexists('LogonServer_s', ''),\n                DstUserName=column_ifexists('UserName_s', ''),\n                LogonType=column_ifexists('LogonType_s', ''),\n                AuthenticationPackage=column_ifexists('AuthenticationPackage_s', ''),\n                UserPrincipal=column_ifexists('UserPrincipal_s', ''),\n                PasswordLastSet=column_ifexists('PasswordLastSet_s', ''),\n                UserLogoffType=column_ifexists('UserLogoffType_s', ''),\n                UserLogonFlags=column_ifexists('UserLogonFlags_s', ''),\n                Parameter2=column_ifexists('Parameter2_s', ''),\n                Parameter1=column_ifexists('Parameter1_s', ''),\n                Parameter3=column_ifexists('Parameter3_s', ''),\n                Line=column_ifexists('Line_s', ''),\n                ErrorStatus=column_ifexists('ErrorStatus_s', ''),\n                Facility=column_ifexists('Facility_s', ''),\n                File=column_ifexists('File_s', ''),\n                PublicKeys=column_ifexists('PublicKeys_s', ''),\n                HandleCreated=column_ifexists('HandleCreated_s', ''),\n                ExtendedKeyUsages=column_ifexists('ExtendedKeyUsages_s', ''),\n                FileSigningTime=column_ifexists('FileSigningTime_s', ''),\n                Object1Name=column_ifexists('Object1Name_s', ''),\n                Object1Type=column_ifexists('Object1Type_s', ''),\n                Certificate=column_ifexists('Certificate_s', ''),\n                RpcClientProcessId=column_ifexists('RpcClientProcessId_s', ''),\n                SyntheticPR2Flags=column_ifexists('SyntheticPR2Flags_s', ''),\n                MachOSubType=column_ifexists('MachOSubType_s', ''),\n                SessionProcessId=column_ifexists('SessionProcessId_s', ''),\n                SVUID=column_ifexists('SVUID_s', ''),\n                ProcessGroupId=column_ifexists('ProcessGroupId_s', ''),\n                GID=column_ifexists('GID_s', ''),\n                SVGID=column_ifexists('SVGID_s', ''),\n                UID=column_ifexists('UID_s', ''),\n                RGID=column_ifexists('RGID_s', ''),\n                RUID=column_ifexists('RUID_s', ''),\n                NeighborList=column_ifexists('NeighborList_s', ''),\n                DownloadServer=column_ifexists('DownloadServer_s', ''),\n                DownloadPath=column_ifexists('DownloadPath_s', ''),\n                DownloadPort=column_ifexists('DownloadPort_s', ''),\n                CompletionEventId=column_ifexists('CompletionEventId_s', ''),\n                IsTransactedFile=column_ifexists('IsTransactedFile_s', ''),\n                WindowStation=column_ifexists('WindowStation_s', ''),\n                BoundingLimitCount=column_ifexists('BoundingLimitCount_s', ''),\n                ProcessBehaviorBitfield=column_ifexists('ProcessBehaviorBitfield_s', ''),\n                Desktop=column_ifexists('Desktop_s', ''),\n                PatternId=column_ifexists('PatternId_s', ''),\n                ExclusionType=column_ifexists('ExclusionType_s', ''),\n                ExclusionSource=column_ifexists('ExclusionSource_s', ''),\n                DriverLoadFlags=column_ifexists('DriverLoadFlags_s', ''),\n                CompanyName=column_ifexists('CompanyName_s', ''),\n                OriginalFilename=column_ifexists('OriginalFilename_s', ''),\n                FileVersion=column_ifexists('FileVersion_s', ''),\n                GrandParentBaseFileName=column_ifexists('GrandParentBaseFileName_s', ''),\n                ShowWindowFlags=column_ifexists('ShowWindowFlags_s', ''),\n                ThreadStartAddress=column_ifexists('ThreadStartAddress_s', ''),\n                InjectedThreadFlag=column_ifexists('InjectedThreadFlag_s', ''),\n                UserThread=column_ifexists('UserThread_s', ''),\n                TargetThreadModule=column_ifexists('TargetThreadModule_s', ''),\n                TargetThreadId=column_ifexists('TargetThreadId_s', ''),\n                ThreadStartContext=column_ifexists('ThreadStartContext_s', ''),\n                SourceThreadStartAddress=column_ifexists('SourceThreadStartAddress_s', ''),\n                InterfaceGuid=column_ifexists('InterfaceGuid_g', ''),\n                InterfaceVersion=column_ifexists('InterfaceVersion_s', ''),\n                RpcClientThreadId=column_ifexists('RpcClientThreadId_s', ''),\n                TaskXml=column_ifexists('TaskXml_s', ''),\n                TaskAuthor=column_ifexists('TaskAuthor_s', ''),\n                TaskName=column_ifexists('TaskName_s', ''),\n                RpcOpNum=column_ifexists('RpcOpNum_s', ''),\n                TaskExecArguments=column_ifexists('TaskExecArguments_s', ''),\n                TaskExecCommand=column_ifexists('TaskExecCommand_s', ''),\n                RpcNestingLevel=column_ifexists('RpcNestingLevel_s', ''),\n                ErrorLocation=column_ifexists('ErrorLocation_s', ''),\n                ErrorReason=column_ifexists('ErrorReason_s', ''),\n                Parameter64_1=column_ifexists('Parameter64_1_s', ''),\n                ErrorSource=column_ifexists('ErrorSource_s', ''),\n                ParameterSizedBuffer_1=column_ifexists('ParameterSizedBuffer_1_g', ''),\n                ErrorCode=column_ifexists('ErrorCode_s', ''),\n                DeviceProductId=column_ifexists('DeviceProductId_s', ''),\n                DeviceVersion=column_ifexists('DeviceVersion_s', ''),\n                DeviceTimeStamp=column_ifexists('DeviceTimeStamp_s', ''),\n                DeviceInstanceId=column_ifexists('DeviceInstanceId_s', ''),\n                DeviceDescriptorSetHash=column_ifexists('DeviceDescriptorSetHash_s', ''),\n                DeviceVendorId=column_ifexists('DeviceVendorId_s', ''),\n                DeviceManufacturer=column_ifexists('DeviceManufacturer_s', ''),\n                DeviceProduct=column_ifexists('DeviceProduct_s', ''),\n                GroupRid=column_ifexists('GroupRid_s', ''),\n                UserRid=column_ifexists('UserRid_s', ''),\n                DomainSid=column_ifexists('DomainSid_s', ''),\n                LightningLatencyState=column_ifexists('LightningLatencyState_s', ''),\n                UnixMode=column_ifexists('UnixMode_s', ''),\n                VnodeType=column_ifexists('VnodeType_s', ''),\n                TargetDirectoryName=column_ifexists('TargetDirectoryName_s', ''),\n                ApiReturnValue=column_ifexists('ApiReturnValue_s', ''),\n                ServiceDisplayName=column_ifexists('ServiceDisplayName_s', ''),\n                LinkName=column_ifexists('LinkName_s', ''),\n                VersionInfo=column_ifexists('VersionInfo_s', ''),\n                LanguageId=column_ifexists('LanguageId_s', ''),\n                AsepFlags=column_ifexists('AsepFlags_s', ''),\n                RegObjectName=column_ifexists('RegObjectName_s', ''),\n                Data1=column_ifexists('Data1_s', ''),\n                RegOperationType=column_ifexists('RegOperationType_s', ''),\n                ProcessArgs=column_ifexists('TargetCommandLineParameters_s', ''),\n                RegStringValue=column_ifexists('RegStringValue_s', ''),\n                RegType=column_ifexists('RegType_s', ''),\n                AsepClass=column_ifexists('AsepClass_s', ''),\n                AsepIndex=column_ifexists('AsepIndex_s', ''),\n                RegValueName=column_ifexists('RegValueName_s', ''),\n                AsepValueType=column_ifexists('AsepValueType_s', ''),\n                LocalSession=column_ifexists('LocalSession_s', ''),\n                DstDvcHostname=column_ifexists('ClientComputerName_s', ''),\n                PrivilegesBitmask=column_ifexists('PrivilegesBitmask_s', ''),\n                EnabledPrivilegesBitmask=column_ifexists('EnabledPrivilegesBitmask_s', ''),\n                UserGroupsBitmask=column_ifexists('UserGroupsBitmask_s', ''),\n                Timeout=column_ifexists('Timeout_s', ''),\n                ProcessCount=column_ifexists('ProcessCount_s', ''),\n                SuppressType=column_ifexists('SuppressType_s', ''),\n                BoundedCount=column_ifexists('BoundedCount_s', ''),\n                IP6Records=column_ifexists('IP6Records_s', ''),\n                FirstIP6Record=column_ifexists('FirstIP6Record_s', ''),\n                WmiQuery=column_ifexists('WmiQuery_s', ''),\n                WmiNamespaceName=column_ifexists('WmiNamespaceName_s', ''),\n                RegClassificationIndex=column_ifexists('RegClassificationIndex_s', ''),\n                RegClassificationFlags=column_ifexists('RegClassificationFlags_s', ''),\n                RegClassification=column_ifexists('RegClassification_s', ''),\n                SystemTableIndex=column_ifexists('SystemTableIndex_s', ''),\n                ScreenshotType=column_ifexists('ScreenshotType_s', ''),\n                SubStatus=column_ifexists('SubStatus_s', ''),\n                UmppaInjectAbortCount=column_ifexists('UmppaInjectAbortCount_s', ''),\n                UmppaInjectFailedCount=column_ifexists('UmppaInjectFailedCount_s', ''),\n                UmppaInjectionType=column_ifexists('UmppaInjectionType_s', ''),\n                UmppaInjectLoadFailCount=column_ifexists('UmppaInjectLoadFailCount_s', ''),\n                UmppaInjectCfgCheckCount=column_ifexists('UmppaInjectCfgCheckCount_s', ''),\n                UmppaInjectExtensionErrorCount=column_ifexists('UmppaInjectExtensionErrorCount_s', ''),\n                UmppaInjectInvalidThreadCount=column_ifexists('UmppaInjectInvalidThreadCount_s', ''),\n                UmppaInjectFileSectionCount=column_ifexists('UmppaInjectFileSectionCount_s', ''),\n                TotalCount=column_ifexists('TotalCount_s', ''),\n                UmppaInjectLoadErrorCount=column_ifexists('UmppaInjectLoadErrorCount_s', ''),\n                UmppaInjectBadAlertCount=column_ifexists('UmppaInjectBadAlertCount_s', ''),\n                UmppaInjectApcInsertionCount=column_ifexists('UmppaInjectApcInsertionCount_s', ''),\n                UmppaInjectCopyFailCount=column_ifexists('UmppaInjectCopyFailCount_s', ''),\n                FirewallRule=column_ifexists('FirewallRule_s', ''),\n                RegNumericValue=column_ifexists('RegNumericValue_s', ''),\n                VolumeDriveLetter=column_ifexists('VolumeDriveLetter_s', ''),\n                VolumeSnapshotName=column_ifexists('VolumeSnapshotName_s', ''),\n                VolumeName=column_ifexists('VolumeName_s', ''),\n                UserCanonical=column_ifexists('UserCanonical_s', ''),\n                LogonId=column_ifexists('LogonId_s', ''),\n                ConfigStateData=column_ifexists('ConfigStateData_s', ''),\n                FirewallProfile=column_ifexists('FirewallProfile_s', ''),\n                FirewallOption=column_ifexists('FirewallOption_s', ''),\n                FirewallOptionNumericValue=column_ifexists('FirewallOptionNumericValue_s', ''),\n                SmbShareName=column_ifexists('SmbShareName_s', ''),\n                TargetSHA256HashData=column_ifexists('TargetSHA256HashData_s', ''),\n                IsCpuDataCommonOnAllCores=column_ifexists('IsCpuDataCommonOnAllCores_s', ''),\n                SpibarDataFrap=column_ifexists('SpibarDataFrap_s', ''),\n                EfiVariableDbxSha256Hash=column_ifexists('EfiVariableDbxSha256Hash_s', ''),\n                PciConfigDataBgsm=column_ifexists('PciConfigDataBgsm_s', ''),\n                PciConfigDataDpr=column_ifexists('PciConfigDataDpr_s', ''),\n                CpuDataCommonSmrrSupported=column_ifexists('CpuDataCommonSmrrSupported_s', ''),\n                SpibarDataHsfc=column_ifexists('SpibarDataHsfc_s', ''),\n                EfiVariableSecureBoot=column_ifexists('EfiVariableSecureBoot_s', ''),\n                PciConfigDataMesegMask=column_ifexists('PciConfigDataMesegMask_s', ''),\n                PciConfigDataTolud=column_ifexists('PciConfigDataTolud_s', ''),\n                EfiVariableDbxAttributes=column_ifexists('EfiVariableDbxAttributes_s', ''),\n                PciConfigDataPavpc=column_ifexists('PciConfigDataPavpc_s', ''),\n                EfiVariableCustomModeAttributes=column_ifexists('EfiVariableCustomModeAttributes_s', ''),\n                SpibarDataFreg3=column_ifexists('SpibarDataFreg3_s', ''),\n                SpibarDataFreg4=column_ifexists('SpibarDataFreg4_s', ''),\n                SpibarDataFreg1=column_ifexists('SpibarDataFreg1_s', ''),\n                SpibarDataFreg2=column_ifexists('SpibarDataFreg2_s', ''),\n                SpibarDataFreg0=column_ifexists('SpibarDataFreg0_s', ''),\n                EfiSupported=column_ifexists('EfiSupported_s', ''),\n                EfiVariablePkAttributes=column_ifexists('EfiVariablePkAttributes_s', ''),\n                CpuDataCommonPrmrrUncorePhysicalMask=column_ifexists('CpuDataCommonPrmrrUncorePhysicalMask_s', ''),\n                PciConfigDataGenPmconA=column_ifexists('PciConfigDataGenPmconA_s', ''),\n                PciConfigDataTsegmb=column_ifexists('PciConfigDataTsegmb_s', ''),\n                SpibarDataVscc0=column_ifexists('SpibarDataVscc0_s', ''),\n                EfiVariablePkSha256Hash=column_ifexists('EfiVariablePkSha256Hash_s', ''),\n                SpibarDataVscc1=column_ifexists('SpibarDataVscc1_s', ''),\n                CpuDataCommonSmrrPhysicalMask=column_ifexists('CpuDataCommonSmrrPhysicalMask_s', ''),\n                NorthBridgeDeviceId=column_ifexists('NorthBridgeDeviceId_s', ''),\n                IsNorthBridgeSupported=column_ifexists('IsNorthBridgeSupported_s', ''),\n                PciConfigDataTom=column_ifexists('PciConfigDataTom_s', ''),\n                EfiVariableKekSha256Hash=column_ifexists('EfiVariableKekSha256Hash_s', ''),\n                SouthBridgeVendorId=column_ifexists('SouthBridgeVendorId_s', ''),\n                EfiVariableSignatureSupport=column_ifexists('EfiVariableSignatureSupport_s', ''),\n                MmioDataTco1Cnt=column_ifexists('MmioDataTco1Cnt_s', ''),\n                EfiVariableKekAttributes=column_ifexists('EfiVariableKekAttributes_s', ''),\n                FirmwareAnalysisCpuSupported=column_ifexists('FirmwareAnalysisCpuSupported_s', ''),\n                MmioDataSmiEn=column_ifexists('MmioDataSmiEn_s', ''),\n                CpuDataCommonPrmrrUncoreSupported=column_ifexists('CpuDataCommonPrmrrUncoreSupported_s', ''),\n                NorthBridgeVendorId=column_ifexists('NorthBridgeVendorId_s', ''),\n                CpuDataCommonMsrApicBase=column_ifexists('CpuDataCommonMsrApicBase_s', ''),\n                EfiVariableDbAttributes=column_ifexists('EfiVariableDbAttributes_s', ''),\n                SpibarDataPr2=column_ifexists('SpibarDataPr2_s', ''),\n                SpibarDataBfpr=column_ifexists('SpibarDataBfpr_s', ''),\n                SpibarDataPr1=column_ifexists('SpibarDataPr1_s', ''),\n                EfiVariableSecureBootAttributes=column_ifexists('EfiVariableSecureBootAttributes_s', ''),\n                SpibarDataPr0=column_ifexists('SpibarDataPr0_s', ''),\n                IsSouthBridgeSupported=column_ifexists('IsSouthBridgeSupported_s', ''),\n                PciConfigDataHfsts1=column_ifexists('PciConfigDataHfsts1_s', ''),\n                CpuDataCommonMsrFeatureControl=column_ifexists('CpuDataCommonMsrFeatureControl_s', ''),\n                PciConfigDataRemaplimit=column_ifexists('PciConfigDataRemaplimit_s', ''),\n                CpuDataCommonSiliconDebugFeatureControl=column_ifexists('CpuDataCommonSiliconDebugFeatureControl_s', ''),\n                CpuDataCommonSmrrPhysicalBase=column_ifexists('CpuDataCommonSmrrPhysicalBase_s', ''),\n                SouthBridgeDeviceId=column_ifexists('SouthBridgeDeviceId_s', ''),\n                CpuDataCommonPrmrrPhysicalMask=column_ifexists('CpuDataCommonPrmrrPhysicalMask_s', ''),\n                EfiVariableDbSha256Hash=column_ifexists('EfiVariableDbSha256Hash_s', ''),\n                SpibarDataHsfs=column_ifexists('SpibarDataHsfs_s', ''),\n                PciConfigDataRemapbase=column_ifexists('PciConfigDataRemapbase_s', ''),\n                EfiVariableCustomMode=column_ifexists('EfiVariableCustomMode_s', ''),\n                PciConfigDataGgc=column_ifexists('PciConfigDataGgc_s', ''),\n                PciConfigDataTouud=column_ifexists('PciConfigDataTouud_s', ''),\n                SpibarDataPr4=column_ifexists('SpibarDataPr4_s', ''),\n                SpibarDataPr3=column_ifexists('SpibarDataPr3_s', ''),\n                CpuDataCommonPrmrrSupported=column_ifexists('CpuDataCommonPrmrrSupported_s', ''),\n                PciConfigDataSmramc=column_ifexists('PciConfigDataSmramc_s', ''),\n                EfiVariableSignatureSupportAttributes=column_ifexists('EfiVariableSignatureSupportAttributes_s', ''),\n                PciConfigDataBdsm=column_ifexists('PciConfigDataBdsm_s', ''),\n                EfiVariableSetupModeAttributes=column_ifexists('EfiVariableSetupModeAttributes_s', ''),\n                EfiVariableSetupMode=column_ifexists('EfiVariableSetupMode_s', ''),\n                PciConfigDataBiosCntl=column_ifexists('PciConfigDataBiosCntl_s', ''),\n                PciConfigDataMesegBase=column_ifexists('PciConfigDataMesegBase_s', ''),\n                SourceFileName=column_ifexists('SourceFileName_s', ''),\n                NewFileIdentifier=column_ifexists('NewFileIdentifier_s', ''),\n                FeatureVector=column_ifexists('FeatureVector_s', ''),\n                ModelPrediction=column_ifexists('ModelPrediction_s', ''),\n                Malicious=column_ifexists('Malicious_s', ''),\n                FeatureExtractionVersion=column_ifexists('FeatureExtractionVersion_s', ''),\n                FXFileSize=column_ifexists('FXFileSize_s', ''),\n                MLModelVersion=column_ifexists('MLModelVersion_s', ''),\n                FontBufferLength=column_ifexists('FontBufferLength_s', ''),\n                FontFileCount=column_ifexists('FontFileCount_s', ''),\n                FontLoadOperation=column_ifexists('FontLoadOperation_s', ''),\n                FontBuffer=column_ifexists('FontBuffer_s', ''),\n                FontFileName=column_ifexists('FontFileName_s', ''),\n                TemplateInstanceId=column_ifexists('TemplateInstanceId_s', ''),\n                PatternDisposition=column_ifexists('PatternDisposition_s', ''),\n                ServicePackMajor=column_ifexists('ServicePackMajor_s', ''),\n                ProductSku=column_ifexists('ProductSku_s', ''),\n                PointerSize=column_ifexists('PointerSize_s', ''),\n                ProductName=column_ifexists('ProductName_s', ''),\n                AgentVersion=column_ifexists('AgentVersion_s', ''),\n                ServicePackMinor=column_ifexists('ServicePackMinor_s', ''),\n                SuiteMask=column_ifexists('SuiteMask_s', ''),\n                SubBuildNumber=column_ifexists('SubBuildNumber_s', ''),\n                PlatformId=column_ifexists('PlatformId_s', ''),\n                BuildType=column_ifexists('BuildType_s', ''),\n                MajorVersion=column_ifexists('MajorVersion_s', ''),\n                ProductType=column_ifexists('ProductType_s', ''),\n                MinorVersion=column_ifexists('MinorVersion_s', ''),\n                CheckedBuild=column_ifexists('CheckedBuild_s', ''),\n                BuildNumber=column_ifexists('BuildNumber_s', ''),\n                RFMState=column_ifexists('RFMState_s', ''),\n                FirmwareAnalysisEclControlInterfaceVersion=column_ifexists('FirmwareAnalysisEclControlInterfaceVersion_s', ''),\n                FirmwareAnalysisEclConsumerInterfaceVersion=column_ifexists('FirmwareAnalysisEclConsumerInterfaceVersion_s', ''),\n                BootTimeFunctionalityLevel=column_ifexists('BootTimeFunctionalityLevel_s', ''),\n                ReasonOfFunctionalityLevel=column_ifexists('ReasonOfFunctionalityLevel_s', ''),\n                CurrentFunctionalityLevel=column_ifexists('CurrentFunctionalityLevel_s', ''),\n                PciAttachmentState=column_ifexists('PciAttachmentState_s', ''),\n                LocalAddressIP6=column_ifexists('LocalAddressIP6_s', ''),\n                RemoteAddressIP6=column_ifexists('RemoteAddressIP6_s', ''),\n                RegBinaryValue=column_ifexists('RegBinaryValue_s', ''),\n                ServiceDescription=column_ifexists('ServiceDescription_s', ''),\n                ServiceSecurity=column_ifexists('ServiceSecurity_s', ''),\n                ServiceImagePath=column_ifexists('ServiceImagePath_s', ''),\n                ServiceStart=column_ifexists('ServiceStart_s', ''),\n                ServiceType=column_ifexists('ServiceType_s', ''),\n                ServiceFailureActions=column_ifexists('ServiceFailureActions_s', ''),\n                ServiceErrorControl=column_ifexists('ServiceErrorControl_s', ''),\n                SymbolicLinkName=column_ifexists('SymbolicLinkName_s', ''),\n                SymbolicLinkTarget=column_ifexists('SymbolicLinkTarget_s', ''),\n                DevicePropertyClassName=column_ifexists('DevicePropertyClassName_s', ''),\n                DeviceActiveConfigurationNumber=column_ifexists('DeviceActiveConfigurationNumber_s', ''),\n                DevicePropertyClassGuid=column_ifexists('DevicePropertyClassGuid_g', ''),\n                DeviceUsbSubclass=column_ifexists('DeviceUsbSubclass_s', ''),\n                ParentHubInstanceId=column_ifexists('ParentHubInstanceId_s', ''),\n                DeviceConnectionStatus=column_ifexists('DeviceConnectionStatus_s', ''),\n                DeviceUsbClass=column_ifexists('DeviceUsbClass_s', ''),\n                ParentHubPort=column_ifexists('ParentHubPort_s', ''),\n                DevicePropertyManufacturer=column_ifexists('DevicePropertyManufacturer_s', ''),\n                DevicePropertyLocationInformation=column_ifexists('DevicePropertyLocationInformation_s', ''),\n                DeviceProtocol=column_ifexists('DeviceProtocol_s', ''),\n                DevicePropertyDeviceDescription=column_ifexists('DevicePropertyDeviceDescription_s', ''),\n                DeviceUsbVersion=column_ifexists('DeviceUsbVersion_s', ''),\n                ModuleBaseAddress=column_ifexists('ModuleBaseAddress_s', ''),\n                ModuleSize=column_ifexists('ModuleSize_s', ''),\n                IsOnClearCaseMvfs=column_ifexists('IsOnClearCaseMvfs_s', ''),\n                DllCharacteristics=column_ifexists('DllCharacteristics_s', ''),\n                ActiveCpuCount=column_ifexists('ActiveCpuCount_s', ''),\n                MemoryTotal=column_ifexists('MemoryTotal_s', ''),\n                BillingType=column_ifexists('BillingType_s', ''),\n                ConnectionCipher=column_ifexists('ConnectionCipher_s', ''),\n                ConnectType=column_ifexists('ConnectType_s', ''),\n                ConnectionProtocol=column_ifexists('ConnectionProtocol_s', ''),\n                ConnectionHash=column_ifexists('ConnectionHash_s', ''),\n                ConnectTime=column_ifexists('ConnectTime_s', ''),\n                ConnectionHashStrength=column_ifexists('ConnectionHashStrength_s', ''),\n                FailedConnectCount=column_ifexists('FailedConnectCount_s', ''),\n                ConnectionCipherStrength=column_ifexists('ConnectionCipherStrength_s', ''),\n                ConnectionExchangeStrength=column_ifexists('ConnectionExchangeStrength_s', ''),\n                ConnectionExchange=column_ifexists('ConnectionExchange_s', ''),\n                PreviousConnectTime=column_ifexists('PreviousConnectTime_s', ''),\n                FalconServiceServletErrors=column_ifexists('FalconServiceServletErrors_s', ''),\n                FalconServiceComponent=column_ifexists('FalconServiceComponent_s', ''),\n                FalconServiceServletStarts=column_ifexists('FalconServiceServletStarts_s', ''),\n                FalconServiceState=column_ifexists('FalconServiceState_s', ''),\n                ScriptContent=column_ifexists('ScriptContent_s', ''),\n                OriginalContentLength=column_ifexists('OriginalContentLength_s', ''),\n                ScriptingLanguageId=column_ifexists('ScriptingLanguageId_s', ''),\n                ParentImageFileName=column_ifexists('ParentImageFileName_s', ''),\n                GrandparentImageFileName=column_ifexists('GrandparentImageFileName_s', ''),\n                ScriptContentName=column_ifexists('ScriptContentName_s', ''),\n                HostProcessType=column_ifexists('HostProcessType_s', ''),\n                ProcessParentCommandLine=column_ifexists('ParentCommandLine_s', ''),\n                ContentSHA256HashData=column_ifexists('ContentSHA256HashData_s', ''),\n                ProcessGrandparentCommandLine=column_ifexists('GrandparentCommandLine_s', '')\n    | project\n                TimeGenerated, \n                EventVendor,\n                EventProduct,\n                FileMode,\n                DeviceSerialNumber,\n                IcmpCode,\n                IcmpType,\n                LastUpdateInstalledTime,\n                RebootRequired,\n                PendingUpdateIds,\n                InstalledUpdateIds,\n                InstalledUpdateExtendedStatus,\n                SupersededUpdateIds,\n                ConfigurationDescriptorValue,\n                ConfigurationDescriptorAttributes,\n                DeviceDescriptorUniqueIdentifier,\n                ConfigurationDescriptorName,\n                ConfigurationDescriptorNumInterfaces,\n                ConfigurationDescriptorMaxPowerDraw,\n                ScreenshotsTakenCount,\n                ExitCode,\n                ParentProcessId,\n                DstUserIdentity,\n                NetworkListenCount,\n                SuspiciousRawDiskReadCount,\n                NetworkBindCount,\n                NetworkRecvAcceptCount,\n                ContextData,\n                Id,\n                NewExecutableWrittenCount,\n                ExeAndServiceCount,\n                NetworkCloseCount,\n                SuspectStackCount,\n                CLICreationCount,\n                UnsignedModuleLoadCount,\n                UserTime,\n                EventMessage,\n                RawProcessId,\n                ContextTimeStamp,\n                AllocateVirtualMemoryCount,\n                ContextProcessId,\n                ServiceEventCount,\n                SnapshotFileOpenCount,\n                RemovableDiskFileWrittenCount,\n                InjectedDllCount,\n                ModuleLoadCount,\n                UserMemoryProtectExecutableCount,\n                NetworkCapableAsepWriteCount,\n                TargetProcessId,\n                DnsRequestCount,\n                ArchiveFileWrittenCount,\n                Entitlements,\n                Name,\n                ProcessStartTime,\n                SetThreadContextCount,\n                SuspiciousCredentialModuleLoadCount,\n                DvcInterfaceGuid,\n                Cid,\n                FileDeletedCount,\n                UserMemoryAllocateExecutableCount,\n                DirectoryCreatedCount,\n                NetworkConnectCountUdp,\n                QueueApcCount,\n                ContextThreadId,\n                Aip,\n                SuspiciousFontLoadCount,\n                ConHostId,\n                NetworkConnectCount,\n                BinaryExecutableWrittenCount,\n                CycleTime,\n                DvcOs,\n                ConHostProcessId,\n                PrivilegedProcessHandleCount,\n                MaxThreadCount,\n                ImageSubsystem,\n                GenericFileWrittenCount,\n                EffectiveTransmissionClass,\n                ScriptEngineInvocationCount,\n                RunDllInvocationCount,\n                timestamp,\n                CreateProcessCount,\n                KernelTime,\n                DirectoryEnumeratedCount,\n                ConfigStateHash,\n                AsepWrittenCount,\n                SuspiciousDnsRequestCount,\n                DocumentFileWrittenCount,\n                ProtectVirtualMemoryCount,\n                ProcessHashSha256,\n                UserMemoryProtectExecutableRemoteCount,\n                ConfigBuild,\n                UserMemoryAllocateExecutableRemoteCount,\n                ExecutableDeletedCount,\n                RegKeySecurityDecreasedCount,\n                InjectedThreadCount,\n                NetworkModuleLoadCount,\n                WindowTitle,\n                ProcessCreateFlags,\n                IntegrityLevel,\n                SourceProcessId,\n                ProcessHashSha1,\n                TokenType,\n                ProcessEndTime,\n                AuthenticodeHashData,\n                ParentBaseFileName,\n                SessionId,\n                Tags,\n                ProcessHashMd5,\n                ProcessSxsFlags,\n                AuthenticationId,\n                WindowFlags,\n                ProcessCommandLine,\n                ParentAuthenticationId,\n                FileName,\n                SourceThreadId,\n                ProcessParameterFlags,\n                SignInfoFlags,\n                ChannelVersion,\n                ChannelVersionRequired,\n                ChannelId,\n                DnsResponseType,\n                IP4Records,\n                CNAMERecords,\n                QueryStatus,\n                InterfaceIndex,\n                DualRequest,\n                FirstIP4Record,\n                UrlDomain,\n                RespondingDnsServer,\n                RequestType,\n                FirewallRuleId,\n                Options,\n                MinorFunction,\n                FileIdentifier,\n                Information,\n                ShareAccess,\n                FileObject,\n                FilePermission,\n                Status,\n                IrpFlags,\n                MajorFunction,\n                DesiredAccess,\n                OperationFlags,\n                TargetFileName,\n                CallStackModuleNamesVersion,\n                CsaProcessDataCollectionInstanceId,\n                CallStackModuleNames,\n                CreateProcessType,\n                EtwRawProcessId,\n                EventMax,\n                EtwRawThreadId,\n                Flags,\n                EventMin,\n                RawThreadId,\n                SrcIpAddr,\n                ConnectionFlags,\n                DstIpPort,\n                SrcIpPort,\n                Protocol,\n                DstIpAddr,\n                ConnectionDirection,\n                InContext,\n                NetworkContainmentState,\n                ConfigIDBase,\n                SensorStateBitMap,\n                ConfigurationVersion,\n                ConfigIDPlatform,\n                ConfigIDBuild,\n                ProvisionState,\n                Size,\n                IsOnNetwork,\n                DiskParentDeviceInstanceId,\n                TemporaryFileName,\n                FileEcpBitmask,\n                IsOnRemovableDisk,\n                ModuleCharacteristics,\n                OriginalEventTimeStamp,\n                MappedFromUserMode,\n                TreeId,\n                PrimaryModule,\n                UserIsAdmin,\n                LogoffTime,\n                LogonTime,\n                LogonDomain,\n                RemoteAccount,\n                UserFlags,\n                LogonServer,\n                DstUserName,\n                LogonType,\n                AuthenticationPackage,\n                UserPrincipal,\n                PasswordLastSet,\n                UserLogoffType,\n                UserLogonFlags,\n                Parameter2,\n                Parameter1,\n                Parameter3,\n                Line,\n                ErrorStatus,\n                Facility,\n                File,\n                PublicKeys,\n                HandleCreated,\n                ExtendedKeyUsages,\n                FileSigningTime,\n                Object1Name,\n                Object1Type,\n                Certificate,\n                RpcClientProcessId,\n                SyntheticPR2Flags,\n                MachOSubType,\n                SessionProcessId,\n                SVUID,\n                ProcessGroupId,\n                GID,\n                SVGID,\n                UID,\n                RGID,\n                RUID,\n                NeighborList,\n                DownloadServer,\n                DownloadPath,\n                DownloadPort,\n                CompletionEventId,\n                IsTransactedFile,\n                WindowStation,\n                BoundingLimitCount,\n                ProcessBehaviorBitfield,\n                Desktop,\n                PatternId,\n                ExclusionType,\n                ExclusionSource,\n                DriverLoadFlags,\n                CompanyName,\n                OriginalFilename,\n                FileVersion,\n                GrandParentBaseFileName,\n                ShowWindowFlags,\n                ThreadStartAddress,\n                InjectedThreadFlag,\n                UserThread,\n                TargetThreadModule,\n                TargetThreadId,\n                ThreadStartContext,\n                SourceThreadStartAddress,\n                InterfaceGuid,\n                InterfaceVersion,\n                RpcClientThreadId,\n                TaskXml,\n                TaskAuthor,\n                TaskName,\n                RpcOpNum,\n                TaskExecArguments,\n                TaskExecCommand,\n                RpcNestingLevel,\n                ErrorLocation,\n                ErrorReason,\n                Parameter64_1,\n                ErrorSource,\n                ParameterSizedBuffer_1,\n                ErrorCode,\n                DeviceProductId,\n                DeviceVersion,\n                DeviceTimeStamp,\n                DeviceInstanceId,\n                DeviceDescriptorSetHash,\n                DeviceVendorId,\n                DeviceManufacturer,\n                DeviceProduct,\n                GroupRid,\n                UserRid,\n                DomainSid,\n                LightningLatencyState,\n                UnixMode,\n                VnodeType,\n                TargetDirectoryName,\n                ApiReturnValue,\n                ServiceDisplayName,\n                LinkName,\n                VersionInfo,\n                LanguageId,\n                AsepFlags,\n                RegObjectName,\n                Data1,\n                RegOperationType,\n                ProcessArgs,\n                RegStringValue,\n                RegType,\n                AsepClass,\n                AsepIndex,\n                RegValueName,\n                AsepValueType,\n                LocalSession,\n                DstDvcHostname,\n                PrivilegesBitmask,\n                EnabledPrivilegesBitmask,\n                UserGroupsBitmask,\n                Timeout,\n                ProcessCount,\n                SuppressType,\n                BoundedCount,\n                IP6Records,\n                FirstIP6Record,\n                WmiQuery,\n                WmiNamespaceName,\n                RegClassificationIndex,\n                RegClassificationFlags,\n                RegClassification,\n                SystemTableIndex,\n                ScreenshotType,\n                SubStatus,\n                UmppaInjectAbortCount,\n                UmppaInjectFailedCount,\n                UmppaInjectionType,\n                UmppaInjectLoadFailCount,\n                UmppaInjectCfgCheckCount,\n                UmppaInjectExtensionErrorCount,\n                UmppaInjectInvalidThreadCount,\n                UmppaInjectFileSectionCount,\n                TotalCount,\n                UmppaInjectLoadErrorCount,\n                UmppaInjectBadAlertCount,\n                UmppaInjectApcInsertionCount,\n                UmppaInjectCopyFailCount,\n                FirewallRule,\n                RegNumericValue,\n                VolumeDriveLetter,\n                VolumeSnapshotName,\n                VolumeName,\n                UserCanonical,\n                LogonId,\n                ConfigStateData,\n                FirewallProfile,\n                FirewallOption,\n                FirewallOptionNumericValue,\n                SmbShareName,\n                TargetSHA256HashData,\n                IsCpuDataCommonOnAllCores,\n                SpibarDataFrap,\n                EfiVariableDbxSha256Hash,\n                PciConfigDataBgsm,\n                PciConfigDataDpr,\n                CpuDataCommonSmrrSupported,\n                SpibarDataHsfc,\n                EfiVariableSecureBoot,\n                PciConfigDataMesegMask,\n                PciConfigDataTolud,\n                EfiVariableDbxAttributes,\n                PciConfigDataPavpc,\n                EfiVariableCustomModeAttributes,\n                SpibarDataFreg3,\n                SpibarDataFreg4,\n                SpibarDataFreg1,\n                SpibarDataFreg2,\n                SpibarDataFreg0,\n                EfiSupported,\n                EfiVariablePkAttributes,\n                CpuDataCommonPrmrrUncorePhysicalMask,\n                PciConfigDataGenPmconA,\n                PciConfigDataTsegmb,\n                SpibarDataVscc0,\n                EfiVariablePkSha256Hash,\n                SpibarDataVscc1,\n                CpuDataCommonSmrrPhysicalMask,\n                NorthBridgeDeviceId,\n                IsNorthBridgeSupported,\n                PciConfigDataTom,\n                EfiVariableKekSha256Hash,\n                SouthBridgeVendorId,\n                EfiVariableSignatureSupport,\n                MmioDataTco1Cnt,\n                EfiVariableKekAttributes,\n                FirmwareAnalysisCpuSupported,\n                MmioDataSmiEn,\n                CpuDataCommonPrmrrUncoreSupported,\n                NorthBridgeVendorId,\n                CpuDataCommonMsrApicBase,\n                EfiVariableDbAttributes,\n                SpibarDataPr2,\n                SpibarDataBfpr,\n                SpibarDataPr1,\n                EfiVariableSecureBootAttributes,\n                SpibarDataPr0,\n                IsSouthBridgeSupported,\n                PciConfigDataHfsts1,\n                CpuDataCommonMsrFeatureControl,\n                PciConfigDataRemaplimit,\n                CpuDataCommonSiliconDebugFeatureControl,\n                CpuDataCommonSmrrPhysicalBase,\n                SouthBridgeDeviceId,\n                CpuDataCommonPrmrrPhysicalMask,\n                EfiVariableDbSha256Hash,\n                SpibarDataHsfs,\n                PciConfigDataRemapbase,\n                EfiVariableCustomMode,\n                PciConfigDataGgc,\n                PciConfigDataTouud,\n                SpibarDataPr4,\n                SpibarDataPr3,\n                CpuDataCommonPrmrrSupported,\n                PciConfigDataSmramc,\n                EfiVariableSignatureSupportAttributes,\n                PciConfigDataBdsm,\n                EfiVariableSetupModeAttributes,\n                EfiVariableSetupMode,\n                PciConfigDataBiosCntl,\n                PciConfigDataMesegBase,\n                SourceFileName,\n                NewFileIdentifier,\n                FeatureVector,\n                ModelPrediction,\n                Malicious,\n                FeatureExtractionVersion,\n                FXFileSize,\n                MLModelVersion,\n                FontBufferLength,\n                FontFileCount,\n                FontLoadOperation,\n                FontBuffer,\n                FontFileName,\n                TemplateInstanceId,\n                PatternDisposition,\n                ServicePackMajor,\n                ProductSku,\n                PointerSize,\n                ProductName,\n                AgentVersion,\n                ServicePackMinor,\n                SuiteMask,\n                SubBuildNumber,\n                PlatformId,\n                BuildType,\n                MajorVersion,\n                ProductType,\n                MinorVersion,\n                CheckedBuild,\n                BuildNumber,\n                RFMState,\n                FirmwareAnalysisEclControlInterfaceVersion,\n                FirmwareAnalysisEclConsumerInterfaceVersion,\n                BootTimeFunctionalityLevel,\n                ReasonOfFunctionalityLevel,\n                CurrentFunctionalityLevel,\n                PciAttachmentState,\n                LocalAddressIP6,\n                RemoteAddressIP6,\n                RegBinaryValue,\n                ServiceDescription,\n                ServiceSecurity,\n                ServiceImagePath,\n                ServiceStart,\n                ServiceType,\n                ServiceFailureActions,\n                ServiceErrorControl,\n                SymbolicLinkName,\n                SymbolicLinkTarget,\n                DevicePropertyClassName,\n                DeviceActiveConfigurationNumber,\n                DevicePropertyClassGuid,\n                DeviceUsbSubclass,\n                ParentHubInstanceId,\n                DeviceConnectionStatus,\n                DeviceUsbClass,\n                ParentHubPort,\n                DevicePropertyManufacturer,\n                DevicePropertyLocationInformation,\n                DeviceProtocol,\n                DevicePropertyDeviceDescription,\n                DeviceUsbVersion,\n                ModuleBaseAddress,\n                ModuleSize,\n                IsOnClearCaseMvfs,\n                DllCharacteristics,\n                ActiveCpuCount,\n                MemoryTotal,\n                BillingType,\n                ConnectionCipher,\n                ConnectType,\n                ConnectionProtocol,\n                ConnectionHash,\n                ConnectTime,\n                ConnectionHashStrength,\n                FailedConnectCount,\n                ConnectionCipherStrength,\n                ConnectionExchangeStrength,\n                ConnectionExchange,\n                PreviousConnectTime,\n                FalconServiceServletErrors,\n                FalconServiceComponent,\n                FalconServiceServletStarts,\n                FalconServiceState,\n                ScriptContent,\n                OriginalContentLength,\n                ScriptingLanguageId,\n                ParentImageFileName,\n                GrandparentImageFileName,\n                ScriptContentName,\n                HostProcessType,\n                ProcessParentCommandLine,\n                ContentSHA256HashData,\n                ProcessGrandparentCommandLine\n};\nCrowdstrikeReplicatorLogs_view",
              "version": 1
            }
          }
        ]
      },
      {
        "type": "Microsoft.Insights/workbooks",
        "name": "[parameters('workbook1-id')]",
        "location": "[parameters('workspace-location')]",
        "kind": "shared",
        "apiVersion": "2020-02-12",
        "properties": {
          "displayName": "[concat(parameters('workbook1-name'), ' - ', parameters('formattedTimeNow'))]",
          "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"5f6ef388-eba8-456d-a86d-b0e5d13753dc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":7776000000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"e75aea48-9de8-48ca-8420-93fcdda9b996\",\"cellValue\":\"TabName\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Detections\",\"subTarget\":\"Detections\",\"style\":\"link\"},{\"id\":\"e06768ad-90d3-49d2-aa55-bac601c19769\",\"cellValue\":\"TabName\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Authentication\",\"subTarget\":\"Authentication\",\"style\":\"link\"}]},\"name\":\"links - 7\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"28302220-bac7-4011-bd0b-b8565627887e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Operation\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| distinct Activity\\r\\n| sort by Activity asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"]},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"94066942-9782-41b5-b60d-4ea12fda9a28\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TargetUserName\",\"label\":\"Target User\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| distinct DstUserName\\r\\n| sort by DstUserName asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"]},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"name\":\"parameters - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| summarize Total = count() by Activity, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Events by Operation over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\"},\"customWidth\":\"75\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"name\":\"query - 2 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"4d809240-d4ee-4266-adc0-cb05344a2f5a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Hostnames\",\"label\":\"Hostname\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct DstHostName\\r\\n| sort by DstHostName asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"Usernames\",\"label\":\"Username\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct DstUserName\\r\\n| sort by DstUserName asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"3be22ee0-2638-4205-bfb4-ba56f9baee92\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"Tactics\",\"label\":\"Tactic\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct Activity\\r\\n| sort by Activity asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"6c37e6c7-3704-4a9c-a10c-227c1d46b694\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"SensorId\",\"label\":\"Sensor ID\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct SensorId\\r\\n| sort by SensorId asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"6e7adfa5-99de-4a23-bf94-2322beee79f1\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"Severity\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct Severity\\r\\n| sort by Severity asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"e3a85e7b-f5ed-43d6-a398-fc1a20bb42f7\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"parameters - 1\"},{\"type\":1,\"content\":{\"json\":\"___\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"text - 17\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize ['Total Detections'] = count() by EventType\",\"size\":4,\"showAnalytics\":true,\"title\":\"Total Detections\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Total Detections\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"customWidth\":\"30\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = dcount(SensorId) by EventType\",\"size\":4,\"showAnalytics\":true,\"title\":\"Number of Sensors\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Total\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":0}}},\"showBorder\":false}},\"customWidth\":\"30\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Severity\",\"size\":4,\"showAnalytics\":true,\"title\":\"Detection by Severity\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"High\",\"color\":\"redDark\"},{\"seriesName\":\"Medium\",\"color\":\"orange\"},{\"seriesName\":\"Low\",\"color\":\"blue\"},{\"seriesName\":\"Critical\",\"color\":\"redBright\"}]}},\"customWidth\":\"40\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy\"},{\"type\":1,\"content\":{\"json\":\"___\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"text - 17 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| where Severity == \\\"Critical\\\"\\r\\n| summarize Total = count() by TimeGenerated, Severity, DstHostName, DstUserName, Activity, Technique, Message\\r\\n| sort by TimeGenerated desc\\r\\n\",\"size\":1,\"showAnalytics\":true,\"title\":\"Critical Severity Events\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Hostname = DstHostName, ['IP Address'] = SrcIpAddr, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Detections by Host over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\"},\"customWidth\":\"60\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Hostname = DstHostName, ['IP Address'] = SrcIpAddr\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 Hosts\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}}]}},\"customWidth\":\"40\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| summarize Total = count() by Activity\\r\\n| sort by Total desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Events by Operation\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"customWidth\":\"25\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| where Outcome == \\\"false\\\"\\r\\n| summarize Total = count() by TimeGenerated, Activity, ['Target Username'] = DstUserName, ['IP Address'] =  DstIpAddr\\r\\n| sort by TimeGenerated desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Failed Events\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"customWidth\":\"100\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"name\":\"query - 2 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| where Outcome == \\\"false\\\"\\r\\n| summarize Total = count() by User = DstUserName\\r\\n| sort by Total desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Failed Events by User\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"name\":\"query - 2 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| where Outcome == \\\"false\\\"\\r\\n| summarize Total = count() by ['IP Address'] = DstIpAddr\\r\\n| sort by Total desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Failed Events by IP Address\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"name\":\"query - 2 - Copy - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by DstUserName, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Detections by User over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\"},\"customWidth\":\"60\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Username = DstUserName\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 Users\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}}]}},\"customWidth\":\"40\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by FileName, FilePath, Tactic = Activity\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"File-Based Detections\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}}],\"filter\":true}},\"customWidth\":\"60\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 15\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by FileName, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"File-Based Detections over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\",\"gridSettings\":{\"filter\":true}},\"customWidth\":\"40\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 15 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Activity, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Detections by Tactics over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\"},\"customWidth\":\"60\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Activity\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Detections by Tactics\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}}]},\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Activity\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Total\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"customWidth\":\"40\",\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy - Copy\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"/subscriptions/419581d6-4853-49bd-83b6-d94bb8a77887/resourcegroups/eco-connector-test/providers/microsoft.operationalinsights/workspaces/eco-connector-test\"],\"fromTemplateId\":\"sentinel-UserWorkbook\"}",
          "version": "1.0",
          "sourceId": "[variables('_workbook-source')]",
          "category": "sentinel"
        }
      },
      {
        "type": "Microsoft.Web/connections",
        "apiVersion": "2018-07-01-preview",
        "name": "[variables('playbook1-keyvault_Connection_Name')]",
        "location": "[parameters('workspace-location')]",
        "properties": {
          "api": {
            "id": "[variables('_playbook-1-connection-2')]"
          },
          "displayName": "[variables('playbook1-keyvault_Connection_Name')]",
          "parameterValueType": "Alternative",
          "AlternativeParameterValues": {
            "vaultName": "[parameters('playbook1-keyvault_Name')]"
          }
        }
      },
      {
        "type": "Microsoft.Logic/workflows",
        "apiVersion": "2019-05-01",
        "name": "[parameters('playbook1-LogicAppName')]",
        "location": "[parameters('workspace-location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/connections', variables('playbook1-keyvault_Connection_Name'))]"
        ],
        "tags": {
          "displayName": "[parameters('playbook1-LogicAppName')]"
        },
        "identity": {
          "type": "SystemAssigned"
        },
        "properties": {
          "state": "Enabled",
          "definition": {
            "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "$connections": {
                "type": "Object"
              }
            },
            "triggers": {
              "manual": {
                "type": "Request",
                "kind": "Http"
              }
            },
            "actions": {
              "Get_secret_-_Client_ID": {
                "runAfter": {
                  "Initialize_variable_ClientSecret": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['keyvault']['connectionId']"
                    }
                  },
                  "method": "get",
                  "path": "/secrets/@{encodeURIComponent(variables('ClientID'))}/value"
                },
                "description": "This gets the secret Client Id from the keyvault",
                "runtimeConfiguration": {
                  "secureData": {
                    "properties": [
                      "inputs",
                      "outputs"
                    ]
                  }
                }
              },
              "Get_secret_-_Client_Secret": {
                "runAfter": {
                  "Get_secret_-_Client_ID": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['keyvault']['connectionId']"
                    }
                  },
                  "method": "get",
                  "path": "/secrets/@{encodeURIComponent(variables('ClientSecret'))}/value"
                },
                "description": "This gets the Clientsecret from the keyvault",
                "runtimeConfiguration": {
                  "secureData": {
                    "properties": [
                      "inputs",
                      "outputs"
                    ]
                  }
                }
              },
              "HTTP_-_Get_Access_Token": {
                "runAfter": {
                  "Initialize_variable_Falcon_Host_URL": [
                    "Succeeded"
                  ]
                },
                "type": "Http",
                "inputs": {
                  "body": "client_id=@{body('Get_secret_-_Client_ID')?['value']}&client_secret=@{body('Get_secret_-_Client_Secret')?['value']}",
                  "headers": {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "accept": "application/json"
                  },
                  "method": "POST",
                  "uri": "@{variables('FalconHost')}/oauth2/token"
                },
                "description": "This calls the crowdstrike to generate the access token",
                "runtimeConfiguration": {
                  "secureData": {
                    "properties": [
                      "inputs",
                      "outputs"
                    ]
                  }
                }
              },
              "Initialize_variable_ClientID": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "ClientID",
                      "type": "string",
                      "value": "[parameters('playbook1-ClientID')]"
                    }
                  ]
                }
              },
              "Initialize_variable_ClientSecret": {
                "runAfter": {
                  "Initialize_variable_ClientID": [
                    "Succeeded"
                  ]
                },
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "ClientSecret",
                      "type": "string",
                      "value": "[parameters('playbook1-ClientSecret')]"
                    }
                  ]
                }
              },
              "Initialize_variable_Falcon_Host_URL": {
                "runAfter": {
                  "Get_secret_-_Client_Secret": [
                    "Succeeded"
                  ]
                },
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "FalconHost",
                      "type": "string",
                      "value": "[parameters('playbook1-Service_Endpoint')]"
                    }
                  ]
                },
                "description": "This is to hold the Falcon Host URL"
              },
              "Parse_JSON_-_Access_Token_Response": {
                "runAfter": {
                  "HTTP_-_Get_Access_Token": [
                    "Succeeded"
                  ]
                },
                "type": "ParseJson",
                "inputs": {
                  "content": "@body('HTTP_-_Get_Access_Token')",
                  "schema": {
                    "properties": {
                      "access_token": {
                        "type": "string"
                      },
                      "expires_in": {
                        "type": "integer"
                      },
                      "token_type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "description": "prepare json format for get access token response",
                "runtimeConfiguration": {
                  "secureData": {
                    "properties": [
                      "inputs"
                    ]
                  }
                }
              },
              "Response": {
                "runAfter": {
                  "Parse_JSON_-_Access_Token_Response": [
                    "Succeeded"
                  ]
                },
                "type": "Response",
                "kind": "Http",
                "inputs": {
                  "body": {
                    "AccessToken": "Bearer @{body('Parse_JSON_-_Access_Token_Response')?['access_token']}",
                    "FalconHost": "@{variables('FalconHost')}"
                  },
                  "statusCode": 200
                },
                "description": "This holds the access token and falcon host URL"
              }
            }
          },
          "parameters": {
            "$connections": {
              "value": {
                "keyvault": {
                  "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/', 'keyvault')]",
                  "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook1-keyvault_Connection_Name'))]",
                  "connectionName": "[variables('playbook1-keyvault_Connection_Name')]",
                  "connectionProperties": {
                    "authentication": {
                      "type": "ManagedServiceIdentity"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "type": "Microsoft.Web/connections",
        "apiVersion": "2018-07-01-preview",
        "name": "[variables('playbook2-AzureSentinelConnectionName')]",
        "location": "[parameters('workspace-location')]",
        "properties": {
          "api": {
            "id": "[variables('_playbook-2-connection-2')]"
          }
        }
      },
      {
        "type": "Microsoft.Logic/workflows",
        "apiVersion": "2019-05-01",
        "name": "[parameters('playbook2-Playbook_Name')]",
        "location": "[parameters('workspace-location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/connections', variables('playbook2-AzureSentinelConnectionName'))]",
          "[resourceId('Microsoft.Logic/workflows', parameters('playbook1-LogicAppName'))]"
        ],
        "tags": {
          "displayName": "[parameters('playbook2-Playbook_Name')]"
        },
        "properties": {
          "state": "Enabled",
          "definition": {
            "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
            "actions": {
              "Add_comment_to_incident_(V3)": {
                "type": "ApiConnection",
                "inputs": {
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "body": {
                    "incidentArmId": "@triggerBody()?['object']?['id']",
                    "message": "<p>@{outputs('Compose_image_to_add_in_the_incident')}<span style=\"font-size: 16px\"><strong>CrowdStrike_ContainHost playbook run results:</strong></span><br> <br> @{variables('Comment')}</p>"
                  },
                  "path": "/Incidents/Comment"
                },
                "runAfter": {
                  "Compose_image_to_add_in_the_incident": [
                    "Succeeded"
                  ]
                },
                "description": "This adds comments to the azure sentinel incident"
              },
              "Compose_image_to_add_in_the_incident": {
                "type": "Compose",
                "inputs": "<img src=\"https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg\"  width=\"32\" height=\"32\">",
                "runAfter": {
                  "Condition_to_check_if_device_is_present_in_falcon_host_crowdstrike": [
                    "Succeeded"
                  ]
                },
                "description": "This composes the crowd strike image to comment in the incident"
              },
              "Condition_to_check_if_crowdstrike_action_is_successful": {
                "type": "If",
                "expression": {
                  "and": [
                    {
                      "equals": [
                        "@variables('Successfromcrowdstike')",
                        "Success"
                      ]
                    }
                  ]
                },
                "actions": {
                  "Update_incident": {
                    "type": "ApiConnection",
                    "inputs": {
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                      },
                      "method": "put",
                      "body": {
                        "incidentArmId": "@triggerBody()?['object']?['id']",
                        "status": "Closed",
                        "classification": {
                          "ClassificationAndReason": "Benign Positive - Suspicious But Expected",
                          "ClassificationReasonText": "CrowdStrike_ContainHost playbook ran and closed this incident"
                        }
                      },
                      "path": "/Incidents"
                    }
                  }
                },
                "runAfter": {
                  "Add_comment_to_incident_(V3)": [
                    "Succeeded"
                  ]
                },
                "description": "This checks if crowdstrike action is successful or not"
              },
              "Condition_to_check_if_device_is_present_in_falcon_host_crowdstrike": {
                "type": "If",
                "expression": {
                  "and": [
                    {
                      "not": {
                        "equals": [
                          "@body('Parse_JSON_Get_device_id_response')?['resources']?[0]",
                          "@null"
                        ]
                      }
                    }
                  ]
                },
                "actions": {
                  "Append_to_string_variable_comment_for_device_information": {
                    "type": "AppendToStringVariable",
                    "inputs": {
                      "name": "Comment",
                      "value": "Devices information from crowdstrike: @{body('Create_HTML_table_for_device_information')}"
                    },
                    "runAfter": {
                      "Create_HTML_table_for_device_information": [
                        "Succeeded"
                      ]
                    },
                    "description": "Append html format of device information to comment in the incident"
                  },
                  "Create_HTML_table_for_device_information": {
                    "type": "Table",
                    "inputs": {
                      "from": "@body('Parse_JSON_device_information_response')?['resources']",
                      "format": "HTML",
                      "columns": [
                        {
                          "header": "device_id",
                          "value": "@item()?['device_id']"
                        },
                        {
                          "header": "external_ip",
                          "value": "@item()?['external_ip']"
                        },
                        {
                          "header": "mac_address",
                          "value": "@item()?['mac_address']"
                        },
                        {
                          "header": "hostname",
                          "value": "@item()?['hostname']"
                        },
                        {
                          "header": "first_seen",
                          "value": "@item()?['first_seen']"
                        },
                        {
                          "header": "last_seen",
                          "value": "@item()?['last_seen']"
                        },
                        {
                          "header": "local_ip",
                          "value": "@item()?['local_ip']"
                        },
                        {
                          "header": "machine_domain",
                          "value": "@item()?['machine_domain']"
                        },
                        {
                          "header": "os_version",
                          "value": "@item()?['os_version']"
                        }
                      ]
                    },
                    "runAfter": {
                      "Parse_JSON_device_information_response": [
                        "Succeeded"
                      ]
                    },
                    "description": "prepare HTML table format to update in the incident"
                  },
                  "HTTP_-_Get_device_information_": {
                    "type": "Http",
                    "inputs": {
                      "method": "GET",
                      "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/entities/devices/v1?ids=@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}",
                      "headers": {
                        "Accept": "application/json",
                        "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                        "Content-Type": "application/json"
                      }
                    },
                    "description": "This gets the device information from crowdstrike"
                  },
                  "Parse_JSON_device_information_response": {
                    "type": "ParseJson",
                    "inputs": {
                      "content": "@body('HTTP_-_Get_device_information_')",
                      "schema": {
                        "properties": {
                          "errors": {
                            "type": "array"
                          },
                          "meta": {
                            "properties": {
                              "powered_by": {
                                "type": "string"
                              },
                              "query_time": {
                                "type": "number"
                              },
                              "trace_id": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "resources": {
                            "items": {
                              "properties": {
                                "agent_load_flags": {
                                  "type": "string"
                                },
                                "agent_local_time": {
                                  "type": "string"
                                },
                                "agent_version": {
                                  "type": "string"
                                },
                                "bios_manufacturer": {
                                  "type": "string"
                                },
                                "bios_version": {
                                  "type": "string"
                                },
                                "build_number": {
                                  "type": "string"
                                },
                                "cid": {
                                  "type": "string"
                                },
                                "config_id_base": {
                                  "type": "string"
                                },
                                "config_id_build": {
                                  "type": "string"
                                },
                                "config_id_platform": {
                                  "type": "string"
                                },
                                "cpu_signature": {
                                  "type": "string"
                                },
                                "device_id": {
                                  "type": "string"
                                },
                                "device_policies": {
                                  "properties": {
                                    "device_control": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "firewall": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "rule_set_id": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "global_config": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "prevention": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "rule_groups": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "remote_response": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "sensor_update": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        },
                                        "uninstall_protection": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "external_ip": {
                                  "type": "string"
                                },
                                "first_seen": {
                                  "type": "string"
                                },
                                "group_hash": {
                                  "type": "string"
                                },
                                "groups": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "hostname": {
                                  "type": "string"
                                },
                                "last_seen": {
                                  "type": "string"
                                },
                                "local_ip": {
                                  "type": "string"
                                },
                                "mac_address": {
                                  "type": "string"
                                },
                                "machine_domain": {
                                  "type": "string"
                                },
                                "major_version": {
                                  "type": "string"
                                },
                                "meta": {
                                  "properties": {
                                    "version": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "minor_version": {
                                  "type": "string"
                                },
                                "modified_timestamp": {
                                  "type": "string"
                                },
                                "os_version": {
                                  "type": "string"
                                },
                                "ou": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "platform_id": {
                                  "type": "string"
                                },
                                "platform_name": {
                                  "type": "string"
                                },
                                "pointer_size": {
                                  "type": "string"
                                },
                                "policies": {
                                  "items": {
                                    "properties": {
                                      "applied": {
                                        "type": "boolean"
                                      },
                                      "applied_date": {
                                        "type": "string"
                                      },
                                      "assigned_date": {
                                        "type": "string"
                                      },
                                      "policy_id": {
                                        "type": "string"
                                      },
                                      "policy_type": {
                                        "type": "string"
                                      },
                                      "rule_groups": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "settings_hash": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "policy_type",
                                      "policy_id",
                                      "applied",
                                      "settings_hash",
                                      "assigned_date",
                                      "applied_date",
                                      "rule_groups"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "product_type": {
                                  "type": "string"
                                },
                                "product_type_desc": {
                                  "type": "string"
                                },
                                "provision_status": {
                                  "type": "string"
                                },
                                "reduced_functionality_mode": {
                                  "type": "string"
                                },
                                "serial_number": {
                                  "type": "string"
                                },
                                "service_pack_major": {
                                  "type": "string"
                                },
                                "service_pack_minor": {
                                  "type": "string"
                                },
                                "site_name": {
                                  "type": "string"
                                },
                                "slow_changing_modified_timestamp": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "system_manufacturer": {
                                  "type": "string"
                                },
                                "system_product_name": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "array"
                                }
                              },
                              "required": [
                                "device_id",
                                "cid",
                                "agent_load_flags",
                                "agent_local_time",
                                "agent_version",
                                "bios_manufacturer",
                                "bios_version",
                                "build_number",
                                "config_id_base",
                                "config_id_build",
                                "config_id_platform",
                                "cpu_signature",
                                "external_ip",
                                "mac_address",
                                "hostname",
                                "first_seen",
                                "last_seen",
                                "local_ip",
                                "machine_domain",
                                "major_version",
                                "minor_version",
                                "platform_id",
                                "platform_name",
                                "policies",
                                "reduced_functionality_mode",
                                "device_policies",
                                "groups",
                                "group_hash",
                                "product_type",
                                "product_type_desc",
                                "provision_status",
                                "serial_number",
                                "service_pack_major",
                                "service_pack_minor",
                                "pointer_size",
                                "status",
                                "system_manufacturer",
                                "system_product_name",
                                "tags",
                                "modified_timestamp",
                                "slow_changing_modified_timestamp",
                                "meta"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "runAfter": {
                      "HTTP_-_Get_device_information_": [
                        "Succeeded"
                      ]
                    },
                    "description": "prepare Json message for device information"
                  },
                  "Switch_to_check_the_device_status": {
                    "type": "Switch",
                    "expression": "@body('Parse_JSON_device_information_response')?['resources']?[0]?['status']",
                    "cases": {
                      "Case_-_contained": {
                        "case": "contained",
                        "actions": {
                          "Append_to_string_variable_comment_if_host_is_contained": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "Comment",
                              "value": "Host Status : Contained Actions taken on devices : No action taken from playbook"
                            },
                            "description": "This appends comments if the host status is already contained"
                          },
                          "Set_variable_success_from_crowdstirke_in_case_of_host_is_already_contained": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Successfromcrowdstike",
                              "value": "Success"
                            },
                            "runAfter": {
                              "Append_to_string_variable_comment_if_host_is_contained": [
                                "Succeeded"
                              ]
                            },
                            "description": "This sets the variable success from crowdstrike to update in the incident"
                          }
                        }
                      },
                      "Case_-_containment_pending": {
                        "case": "containment_pending",
                        "actions": {
                          "Append_to_string_variable_comment_if_host_status_is_containment_pending": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "Comment",
                              "value": "Host Status : containment_pending Actions taken on devices : No action taken from playbook"
                            },
                            "description": "This appends comments if the host status is containment pending"
                          },
                          "Set_variable_success_from_crowdstirke_in_case_of_containment_pending": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Successfromcrowdstike",
                              "value": "Success"
                            },
                            "runAfter": {
                              "Append_to_string_variable_comment_if_host_status_is_containment_pending": [
                                "Succeeded"
                              ]
                            },
                            "description": "This sets the variable success from crowdstrike to update in the incident"
                          }
                        }
                      },
                      "Case_-_lift_containment_pending": {
                        "case": "lift_containment_pending",
                        "actions": {
                          "Append_to_string_variable_comment_if_host_status_is_lift_containment_pending": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "Comment",
                              "value": "Host Status : Lift_containment_pending Actions taken on devices : No action taken from playbook"
                            },
                            "description": "Append to variable comment if host status is lift containment pending"
                          },
                          "Set_variable_success_from_crowdstirke_in_case_of_lift_containment_pending": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Successfromcrowdstike",
                              "value": "Success"
                            },
                            "runAfter": {
                              "Append_to_string_variable_comment_if_host_status_is_lift_containment_pending": [
                                "Succeeded"
                              ]
                            },
                            "description": "This sets the variable success from crowdstrike to update in the incident"
                          }
                        }
                      },
                      "Case_-_not_contained": {
                        "case": "normal",
                        "actions": {
                          "Condition_to_check_if_contain_success_or_not": {
                            "type": "If",
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('HTTP_-_Contain_a_host')['statusCode']",
                                    202
                                  ]
                                }
                              ]
                            },
                            "actions": {
                              "Append_to_string_variable_comment_if_host_is_contained_by_playbook": {
                                "type": "AppendToStringVariable",
                                "inputs": {
                                  "name": "Comment",
                                  "value": "Host Status : Contained Actions taken on devices : The playbook sucessfully contained the host"
                                },
                                "description": "This appends the variable comment if host is contained by playbook"
                              },
                              "Set_variable_success_from_crowdstirke_in_case_of_success": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Successfromcrowdstike",
                                  "value": "Success"
                                },
                                "runAfter": {
                                  "Append_to_string_variable_comment_if_host_is_contained_by_playbook": [
                                    "Succeeded"
                                  ]
                                },
                                "description": "This sets variable success from crowdstirke in case of success"
                              }
                            },
                            "runAfter": {
                              "HTTP_-_Contain_a_host": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Append_to_string_variable_comment_if_host_is_not_contained_by_playbook": {
                                  "type": "AppendToStringVariable",
                                  "inputs": {
                                    "name": "Comment",
                                    "value": "Host Status : Not contained/Normal Actions taken on devices : The playbook failed to contain the host"
                                  },
                                  "description": "This sets the variable comment if host is not contained by playbook"
                                },
                                "Set_variable_success_from_crowdstrike_in_case_of_failure": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Successfromcrowdstike",
                                    "value": "Failure"
                                  },
                                  "runAfter": {
                                    "Append_to_string_variable_comment_if_host_is_not_contained_by_playbook": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "This sets variable success from crowdstirke in case of Failure"
                                }
                              }
                            },
                            "description": "condition to check if contain a host is success or failure"
                          },
                          "HTTP_-_Contain_a_host": {
                            "type": "Http",
                            "inputs": {
                              "method": "POST",
                              "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/entities/devices-actions/v2?action_name=contain",
                              "headers": {
                                "Accept": "application/json",
                                "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                                "Content-Type": "application/json"
                              },
                              "body": {
                                "action_parameters": [
                                  {
                                    "name": "contain"
                                  }
                                ],
                                "ids": [
                                  "@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}"
                                ]
                              }
                            },
                            "description": "This will contain a host in crowdstrike"
                          }
                        }
                      }
                    },
                    "runAfter": {
                      "Append_to_string_variable_comment_for_device_information": [
                        "Succeeded"
                      ]
                    },
                    "description": "This checks on the device status"
                  }
                },
                "runAfter": {
                  "Parse_JSON_Get_device_id_response": [
                    "Succeeded"
                  ]
                },
                "else": {
                  "actions": {
                    "Append_to_string_variable_comment_if_no_device_exist": {
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "Comment",
                        "value": "There is no device present in Crowdstrike"
                      },
                      "description": "This appends test to comment if no device available in crowdstrike"
                    },
                    "Set_variable_success_from_crowdstrike": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Successfromcrowdstike",
                        "value": "Success"
                      },
                      "runAfter": {
                        "Append_to_string_variable_comment_if_no_device_exist": [
                          "Succeeded"
                        ]
                      },
                      "description": "This sets the variable success in case of no device info found"
                    }
                  }
                },
                "description": "This checks if device is present in crowdstrike or not"
              },
              "CrowdStrike_Base": {
                "type": "Workflow",
                "inputs": {
                  "host": {
                    "triggerName": "manual",
                    "workflow": {
                      "id": "[resourceId('Microsoft.Logic/workflows', parameters('playbook1-LogicAppName'))]"
                    }
                  }
                },
                "runAfter": {
                  "Initialize_variable_success_from_crowdstrike": [
                    "Succeeded"
                  ]
                },
                "description": "Call the base logic App to get access token and Falcon Host URL",
                "runtimeConfiguration": {
                  "secureData": {
                    "properties": [
                      "inputs",
                      "outputs"
                    ]
                  }
                }
              },
              "Entities_-_Get_Hosts": {
                "type": "ApiConnection",
                "inputs": {
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                  "path": "/entities/host"
                }
              },
              "HTTP_-_Get_device_id": {
                "type": "Http",
                "inputs": {
                  "method": "GET",
                  "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/queries/devices/v1?filter=hostname:'@{body('Entities_-_Get_Hosts')?['Hosts']?[0]?['HostName']}'",
                  "headers": {
                    "Accept": "application/json",
                    "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                    "Content-Type": "application/json"
                  }
                },
                "runAfter": {
                  "CrowdStrike_Base": [
                    "Succeeded"
                  ]
                },
                "description": "This gets the device id from crowdstrike by filtering on hostname"
              },
              "Initialize_variable_comment": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "Comment",
                      "type": "string"
                    }
                  ]
                },
                "runAfter": {
                  "Entities_-_Get_Hosts": [
                    "Succeeded"
                  ]
                },
                "description": "This is used to store comments to update in the incident"
              },
              "Initialize_variable_success_from_crowdstrike": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "Successfromcrowdstike",
                      "type": "string"
                    }
                  ]
                },
                "runAfter": {
                  "Initialize_variable_comment": [
                    "Succeeded"
                  ]
                },
                "description": "This is used to hold the success or failure information from crowdstrike api actions"
              },
              "Parse_JSON_Get_device_id_response": {
                "type": "ParseJson",
                "inputs": {
                  "content": "@body('HTTP_-_Get_device_id')",
                  "schema": {
                    "meta": {
                      "pagination": {
                        "limit": 100,
                        "offset": 1,
                        "total": 1
                      },
                      "powered_by": "device-api",
                      "query_time": 0.005041315,
                      "trace_id": "aa7b84f5-3e81-4980-ad9f-c14b6d8ca577"
                    },
                    "resources": [
                      "cdc977a72a8c49528bb82f89dde2c2e9"
                    ]
                  }
                },
                "runAfter": {
                  "HTTP_-_Get_device_id": [
                    "Succeeded"
                  ]
                },
                "description": "prepare json message for the device id response"
              }
            },
            "parameters": {
              "$connections": {
                "type": "Object"
              }
            },
            "triggers": {
              "When_Azure_Sentinel_incident_creation_rule_was_triggered_(Private_Preview_only)": {
                "type": "ApiConnectionWebhook",
                "inputs": {
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "body": {
                    "callback_url": "@{listCallbackUrl()}"
                  },
                  "path": "/incident-creation"
                }
              }
            },
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "$connections": {
              "value": {
                "azuresentinel": {
                  "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-AzureSentinelConnectionName'))]",
                  "connectionName": "[variables('playbook2-AzureSentinelConnectionName')]",
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/azuresentinel')]"
                }
              }
            }
          }
        }
      },
      {
        "type": "Microsoft.Web/connections",
        "apiVersion": "2018-07-01-preview",
        "name": "[variables('playbook3-AzureSentinelConnectionName')]",
        "location": "[parameters('workspace-location')]",
        "properties": {
          "api": {
            "id": "[variables('_playbook-2-connection-2')]"
          }
        }
      },
      {
        "type": "Microsoft.Logic/workflows",
        "apiVersion": "2019-05-01",
        "name": "[parameters('playbook3-Playbook_Name')]",
        "location": "[parameters('workspace-location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/connections', variables('playbook3-AzureSentinelConnectionName'))]",
          "[resourceId('Microsoft.Logic/workflows', parameters('playbook1-LogicAppName'))]"
        ],
        "properties": {
          "state": "Enabled",
          "definition": {
            "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
            "actions": {
              "Add_comment_to_incident_(V3)": {
                "runAfter": {
                  "Compose_image_to_add_in_the_incident": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "incidentArmId": "@triggerBody()?['object']?['id']",
                    "message": "<p>@{outputs('Compose_image_to_add_in_the_incident')}<span style=\"font-size: 14px\"><strong>Crowdstrike_Enrichment_GetDeviceInformation playbook run results:</strong></span><br> <br> @{variables('Comment')}<br> </p>"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/Incidents/Comment"
                }
              },
              "Compose_image_to_add_in_the_incident": {
                "type": "Compose",
                "inputs": "<img src=\"https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg\" alt=\"Lamp\" width=\"32\" height=\"32\">",
                "runAfter": {
                  "Condition__to_check_if_device_id_returns_results": [
                    "Succeeded"
                  ]
                },
                "description": "This composes crowdstrike image to comment in the incident"
              },
              "Condition__to_check_if_device_id_returns_results": {
                "type": "If",
                "expression": {
                  "and": [
                    {
                      "not": {
                        "equals": [
                          "@body('Parse_JSON_Get_device_id_response')?['resources']?[0]",
                          "@null"
                        ]
                      }
                    }
                  ]
                },
                "actions": {
                  "Append_to_string_variable_comment_for_device_information": {
                    "type": "AppendToStringVariable",
                    "inputs": {
                      "name": "Comment",
                      "value": "Device information: @{body('Create_HTML_table_for_device_information')}"
                    },
                    "runAfter": {
                      "Create_HTML_table_for_device_information": [
                        "Succeeded"
                      ]
                    },
                    "description": "Appends device information to comment variable"
                  },
                  "Condition_if_detections_are_present_for_the_host": {
                    "type": "If",
                    "expression": {
                      "and": [
                        {
                          "not": {
                            "equals": [
                              "@body('Parse_JSON_search_detections_response')?['resources']?[0]",
                              "@null"
                            ]
                          }
                        }
                      ]
                    },
                    "actions": {
                      "Append_to_string_variable_detection_information": {
                        "type": "AppendToStringVariable",
                        "inputs": {
                          "name": "Comment",
                          "value": "Detection Information: @{body('Select_detection_information')}"
                        },
                        "runAfter": {
                          "Select_detection_information": [
                            "Succeeded"
                          ]
                        },
                        "description": "This appends detection information to comment variable"
                      },
                      "HTTP-Get_detection_information": {
                        "type": "Http",
                        "inputs": {
                          "method": "POST",
                          "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/detects/entities/summaries/GET/v1",
                          "headers": {
                            "Accept": "application/json",
                            "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                            "Content-Type": "application/json"
                          },
                          "body": {
                            "ids": "@body('Parse_JSON_search_detections_response')?['resources']"
                          }
                        },
                        "description": "This gets the detection information from the crowdstrike"
                      },
                      "Parse_JSON_detection_information_response": {
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('HTTP-Get_detection_information')",
                          "schema": {
                            "properties": {
                              "errors": {
                                "type": "array"
                              },
                              "meta": {
                                "properties": {
                                  "powered_by": {
                                    "type": "string"
                                  },
                                  "query_time": {
                                    "type": "number"
                                  },
                                  "trace_id": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "resources": {
                                "items": {
                                  "properties": {
                                    "behaviors": {
                                      "items": {
                                        "properties": {
                                          "alleged_filetype": {
                                            "type": "string"
                                          },
                                          "behavior_id": {
                                            "type": "string"
                                          },
                                          "cmdline": {
                                            "type": "string"
                                          },
                                          "confidence": {
                                            "type": "integer"
                                          },
                                          "control_graph_id": {
                                            "type": "string"
                                          },
                                          "device_id": {
                                            "type": "string"
                                          },
                                          "display_name": {
                                            "type": "string"
                                          },
                                          "filename": {
                                            "type": "string"
                                          },
                                          "filepath": {
                                            "type": "string"
                                          },
                                          "ioc_description": {
                                            "type": "string"
                                          },
                                          "ioc_source": {
                                            "type": "string"
                                          },
                                          "ioc_type": {
                                            "type": "string"
                                          },
                                          "ioc_value": {
                                            "type": "string"
                                          },
                                          "md5": {
                                            "type": "string"
                                          },
                                          "objective": {
                                            "type": "string"
                                          },
                                          "parent_details": {
                                            "properties": {
                                              "parent_cmdline": {
                                                "type": "string"
                                              },
                                              "parent_md5": {
                                                "type": "string"
                                              },
                                              "parent_process_graph_id": {
                                                "type": "string"
                                              },
                                              "parent_sha256": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "pattern_disposition": {
                                            "type": "integer"
                                          },
                                          "pattern_disposition_details": {
                                            "properties": {
                                              "bootup_safeguard_enabled": {
                                                "type": "boolean"
                                              },
                                              "critical_process_disabled": {
                                                "type": "boolean"
                                              },
                                              "detect": {
                                                "type": "boolean"
                                              },
                                              "fs_operation_blocked": {
                                                "type": "boolean"
                                              },
                                              "handle_operation_downgraded": {
                                                "type": "boolean"
                                              },
                                              "inddet_mask": {
                                                "type": "boolean"
                                              },
                                              "indicator": {
                                                "type": "boolean"
                                              },
                                              "kill_parent": {
                                                "type": "boolean"
                                              },
                                              "kill_process": {
                                                "type": "boolean"
                                              },
                                              "kill_subprocess": {
                                                "type": "boolean"
                                              },
                                              "operation_blocked": {
                                                "type": "boolean"
                                              },
                                              "policy_disabled": {
                                                "type": "boolean"
                                              },
                                              "process_blocked": {
                                                "type": "boolean"
                                              },
                                              "quarantine_file": {
                                                "type": "boolean"
                                              },
                                              "quarantine_machine": {
                                                "type": "boolean"
                                              },
                                              "registry_operation_blocked": {
                                                "type": "boolean"
                                              },
                                              "rooting": {
                                                "type": "boolean"
                                              },
                                              "sensor_only": {
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "scenario": {
                                            "type": "string"
                                          },
                                          "severity": {
                                            "type": "integer"
                                          },
                                          "sha256": {
                                            "type": "string"
                                          },
                                          "tactic": {
                                            "type": "string"
                                          },
                                          "tactic_id": {
                                            "type": "string"
                                          },
                                          "technique": {
                                            "type": "string"
                                          },
                                          "technique_id": {
                                            "type": "string"
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "triggering_process_graph_id": {
                                            "type": "string"
                                          },
                                          "user_id": {
                                            "type": "string"
                                          },
                                          "user_name": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "device_id",
                                          "timestamp",
                                          "behavior_id",
                                          "filename",
                                          "filepath",
                                          "alleged_filetype",
                                          "cmdline",
                                          "scenario",
                                          "objective",
                                          "tactic",
                                          "tactic_id",
                                          "technique",
                                          "technique_id",
                                          "display_name",
                                          "severity",
                                          "confidence",
                                          "ioc_type",
                                          "ioc_value",
                                          "ioc_source",
                                          "ioc_description",
                                          "user_name",
                                          "user_id",
                                          "control_graph_id",
                                          "triggering_process_graph_id",
                                          "sha256",
                                          "md5",
                                          "parent_details",
                                          "pattern_disposition",
                                          "pattern_disposition_details"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "behaviors_processed": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "cid": {
                                      "type": "string"
                                    },
                                    "created_timestamp": {
                                      "type": "string"
                                    },
                                    "detection_id": {
                                      "type": "string"
                                    },
                                    "device": {
                                      "properties": {
                                        "agent_load_flags": {
                                          "type": "string"
                                        },
                                        "agent_local_time": {
                                          "type": "string"
                                        },
                                        "agent_version": {
                                          "type": "string"
                                        },
                                        "bios_manufacturer": {
                                          "type": "string"
                                        },
                                        "bios_version": {
                                          "type": "string"
                                        },
                                        "cid": {
                                          "type": "string"
                                        },
                                        "config_id_base": {
                                          "type": "string"
                                        },
                                        "config_id_build": {
                                          "type": "string"
                                        },
                                        "config_id_platform": {
                                          "type": "string"
                                        },
                                        "device_id": {
                                          "type": "string"
                                        },
                                        "external_ip": {
                                          "type": "string"
                                        },
                                        "first_seen": {
                                          "type": "string"
                                        },
                                        "groups": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "hostname": {
                                          "type": "string"
                                        },
                                        "last_seen": {
                                          "type": "string"
                                        },
                                        "local_ip": {
                                          "type": "string"
                                        },
                                        "mac_address": {
                                          "type": "string"
                                        },
                                        "machine_domain": {
                                          "type": "string"
                                        },
                                        "major_version": {
                                          "type": "string"
                                        },
                                        "minor_version": {
                                          "type": "string"
                                        },
                                        "modified_timestamp": {
                                          "type": "string"
                                        },
                                        "os_version": {
                                          "type": "string"
                                        },
                                        "ou": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "platform_id": {
                                          "type": "string"
                                        },
                                        "platform_name": {
                                          "type": "string"
                                        },
                                        "product_type": {
                                          "type": "string"
                                        },
                                        "product_type_desc": {
                                          "type": "string"
                                        },
                                        "site_name": {
                                          "type": "string"
                                        },
                                        "status": {
                                          "type": "string"
                                        },
                                        "system_manufacturer": {
                                          "type": "string"
                                        },
                                        "system_product_name": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "email_sent": {
                                      "type": "boolean"
                                    },
                                    "first_behavior": {
                                      "type": "string"
                                    },
                                    "hostinfo": {
                                      "properties": {
                                        "active_directory_dn_display": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "domain": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "last_behavior": {
                                      "type": "string"
                                    },
                                    "max_confidence": {
                                      "type": "integer"
                                    },
                                    "max_severity": {
                                      "type": "integer"
                                    },
                                    "max_severity_displayname": {
                                      "type": "string"
                                    },
                                    "seconds_to_resolved": {
                                      "type": "integer"
                                    },
                                    "seconds_to_triaged": {
                                      "type": "integer"
                                    },
                                    "show_in_ui": {
                                      "type": "boolean"
                                    },
                                    "status": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "cid",
                                    "created_timestamp",
                                    "detection_id",
                                    "device",
                                    "behaviors",
                                    "email_sent",
                                    "first_behavior",
                                    "last_behavior",
                                    "max_confidence",
                                    "max_severity",
                                    "max_severity_displayname",
                                    "show_in_ui",
                                    "status",
                                    "hostinfo",
                                    "seconds_to_triaged",
                                    "seconds_to_resolved",
                                    "behaviors_processed"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "runAfter": {
                          "HTTP-Get_detection_information": [
                            "Succeeded"
                          ]
                        },
                        "description": "prepares json message for detection information"
                      },
                      "Select_detection_information": {
                        "type": "Select",
                        "inputs": {
                          "from": "@body('Parse_JSON_detection_information_response')?['resources']",
                          "select": {
                            "detection_id": "@item()?['detection_id']",
                            "device_id": "@item()?['device']?['device_id']",
                            "domain": "@item()?['hostinfo']?['domain']",
                            "local_ip": "@item()?['device']?['local_ip']"
                          }
                        },
                        "runAfter": {
                          "Parse_JSON_detection_information_response": [
                            "Succeeded"
                          ]
                        },
                        "description": "compose detection information"
                      }
                    },
                    "runAfter": {
                      "Parse_JSON_search_detections_response": [
                        "Succeeded"
                      ]
                    },
                    "else": {
                      "actions": {
                        "Append_to_string_variable_comment_if_no_detections_are_present": {
                          "type": "AppendToStringVariable",
                          "inputs": {
                            "name": "Comment",
                            "value": "There are no detections present for this device."
                          },
                          "description": "this appends text to comments if no detections are present"
                        }
                      }
                    },
                    "description": "This checks if detections are present for the host"
                  },
                  "Create_HTML_table_for_device_information": {
                    "type": "Table",
                    "inputs": {
                      "from": "@body('Parse_JSON_device_information_response')?['resources']",
                      "format": "HTML",
                      "columns": [
                        {
                          "header": "device_id",
                          "value": "@item()?['device_id']"
                        },
                        {
                          "header": "external_ip",
                          "value": "@item()?['external_ip']"
                        },
                        {
                          "header": "mac_address",
                          "value": "@item()?['mac_address']"
                        },
                        {
                          "header": "hostname",
                          "value": "@item()?['hostname']"
                        },
                        {
                          "header": "first_seen",
                          "value": "@item()?['first_seen']"
                        },
                        {
                          "header": "last_seen",
                          "value": "@item()?['last_seen']"
                        },
                        {
                          "header": "local_ip",
                          "value": "@item()?['local_ip']"
                        },
                        {
                          "header": "machine_domain",
                          "value": "@item()?['machine_domain']"
                        },
                        {
                          "header": "os_version",
                          "value": "@item()?['os_version']"
                        }
                      ]
                    },
                    "runAfter": {
                      "Parse_JSON_device_information_response": [
                        "Succeeded"
                      ]
                    },
                    "description": "prepares HTML table for device information"
                  },
                  "HTTP_-Search_for_detections": {
                    "type": "Http",
                    "inputs": {
                      "method": "GET",
                      "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/detects/queries/detects/v1?filter=first_behavior:>'@{variables('Timestamp')}'&device_id:'@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}'&sort=first_behavior.desc",
                      "headers": {
                        "Accept": "application/json",
                        "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                        "Content-Type": "application/json"
                      }
                    },
                    "runAfter": {
                      "Set_variable_timestamp_for_past_3_days": [
                        "Succeeded"
                      ]
                    },
                    "description": "searches the detections based on the filters from crowdstrike"
                  },
                  "HTTP_-_Get_device_information_": {
                    "type": "Http",
                    "inputs": {
                      "method": "GET",
                      "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/entities/devices/v1?ids=@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}",
                      "headers": {
                        "Accept": "application/json",
                        "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                        "Content-Type": "application/json"
                      }
                    },
                    "description": "This gets the device information from crowdstrike"
                  },
                  "Parse_JSON_device_information_response": {
                    "type": "ParseJson",
                    "inputs": {
                      "content": "@body('HTTP_-_Get_device_information_')",
                      "schema": {
                        "properties": {
                          "errors": {
                            "type": "array"
                          },
                          "meta": {
                            "properties": {
                              "powered_by": {
                                "type": "string"
                              },
                              "query_time": {
                                "type": "number"
                              },
                              "trace_id": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "resources": {
                            "items": {
                              "properties": {
                                "agent_load_flags": {
                                  "type": "string"
                                },
                                "agent_local_time": {
                                  "type": "string"
                                },
                                "agent_version": {
                                  "type": "string"
                                },
                                "bios_manufacturer": {
                                  "type": "string"
                                },
                                "bios_version": {
                                  "type": "string"
                                },
                                "build_number": {
                                  "type": "string"
                                },
                                "cid": {
                                  "type": "string"
                                },
                                "config_id_base": {
                                  "type": "string"
                                },
                                "config_id_build": {
                                  "type": "string"
                                },
                                "config_id_platform": {
                                  "type": "string"
                                },
                                "cpu_signature": {
                                  "type": "string"
                                },
                                "device_id": {
                                  "type": "string"
                                },
                                "device_policies": {
                                  "properties": {
                                    "device_control": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "firewall": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "rule_set_id": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "global_config": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "prevention": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "rule_groups": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "remote_response": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "sensor_update": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        },
                                        "uninstall_protection": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "external_ip": {
                                  "type": "string"
                                },
                                "first_seen": {
                                  "type": "string"
                                },
                                "group_hash": {
                                  "type": "string"
                                },
                                "groups": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "hostname": {
                                  "type": "string"
                                },
                                "last_seen": {
                                  "type": "string"
                                },
                                "local_ip": {
                                  "type": "string"
                                },
                                "mac_address": {
                                  "type": "string"
                                },
                                "machine_domain": {
                                  "type": "string"
                                },
                                "major_version": {
                                  "type": "string"
                                },
                                "meta": {
                                  "properties": {
                                    "version": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "minor_version": {
                                  "type": "string"
                                },
                                "modified_timestamp": {
                                  "type": "string"
                                },
                                "os_version": {
                                  "type": "string"
                                },
                                "ou": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "platform_id": {
                                  "type": "string"
                                },
                                "platform_name": {
                                  "type": "string"
                                },
                                "pointer_size": {
                                  "type": "string"
                                },
                                "policies": {
                                  "items": {
                                    "properties": {
                                      "applied": {
                                        "type": "boolean"
                                      },
                                      "applied_date": {
                                        "type": "string"
                                      },
                                      "assigned_date": {
                                        "type": "string"
                                      },
                                      "policy_id": {
                                        "type": "string"
                                      },
                                      "policy_type": {
                                        "type": "string"
                                      },
                                      "rule_groups": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "settings_hash": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "policy_type",
                                      "policy_id",
                                      "applied",
                                      "settings_hash",
                                      "assigned_date",
                                      "applied_date",
                                      "rule_groups"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "product_type": {
                                  "type": "string"
                                },
                                "product_type_desc": {
                                  "type": "string"
                                },
                                "provision_status": {
                                  "type": "string"
                                },
                                "reduced_functionality_mode": {
                                  "type": "string"
                                },
                                "serial_number": {
                                  "type": "string"
                                },
                                "service_pack_major": {
                                  "type": "string"
                                },
                                "service_pack_minor": {
                                  "type": "string"
                                },
                                "site_name": {
                                  "type": "string"
                                },
                                "slow_changing_modified_timestamp": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "system_manufacturer": {
                                  "type": "string"
                                },
                                "system_product_name": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "array"
                                }
                              },
                              "required": [
                                "device_id",
                                "cid",
                                "agent_load_flags",
                                "agent_local_time",
                                "agent_version",
                                "bios_manufacturer",
                                "bios_version",
                                "build_number",
                                "config_id_base",
                                "config_id_build",
                                "config_id_platform",
                                "cpu_signature",
                                "external_ip",
                                "mac_address",
                                "hostname",
                                "first_seen",
                                "last_seen",
                                "local_ip",
                                "major_version",
                                "minor_version",
                                "os_version",
                                "platform_id",
                                "platform_name",
                                "policies",
                                "reduced_functionality_mode",
                                "device_policies",
                                "groups",
                                "group_hash",
                                "product_type",
                                "product_type_desc",
                                "provision_status",
                                "serial_number",
                                "service_pack_major",
                                "service_pack_minor",
                                "pointer_size",
                                "status",
                                "system_manufacturer",
                                "system_product_name",
                                "tags",
                                "modified_timestamp",
                                "slow_changing_modified_timestamp",
                                "meta"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "runAfter": {
                      "HTTP_-_Get_device_information_": [
                        "Succeeded"
                      ]
                    },
                    "description": "prepares json for device information"
                  },
                  "Parse_JSON_search_detections_response": {
                    "type": "ParseJson",
                    "inputs": {
                      "content": "@body('HTTP_-Search_for_detections')",
                      "schema": {
                        "properties": {
                          "errors": {
                            "type": "array"
                          },
                          "meta": {
                            "properties": {
                              "pagination": {
                                "properties": {
                                  "limit": {
                                    "type": "integer"
                                  },
                                  "offset": {
                                    "type": "integer"
                                  },
                                  "total": {
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "powered_by": {
                                "type": "string"
                              },
                              "query_time": {
                                "type": "number"
                              },
                              "trace_id": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "resources": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "runAfter": {
                      "HTTP_-Search_for_detections": [
                        "Succeeded"
                      ]
                    },
                    "description": "prepares json for search detections"
                  },
                  "Set_variable_timestamp_for_past_3_days": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Timestamp",
                      "value": "@{getPastTime(3, 'Day')}"
                    },
                    "runAfter": {
                      "Append_to_string_variable_comment_for_device_information": [
                        "Succeeded"
                      ]
                    },
                    "description": "set variable timestamp for past 3 days to filter detections"
                  }
                },
                "runAfter": {
                  "Parse_JSON_Get_device_id_response": [
                    "Succeeded"
                  ]
                },
                "else": {
                  "actions": {
                    "Append_to_string_variable_if_no_devices_are_present": {
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "Comment",
                        "value": "There are no devices present"
                      },
                      "description": "This appends text to string variable if no devices are present"
                    }
                  }
                },
                "description": "This checks if device is present in falcon host or not"
              },
              "CrowdStrike_Base": {
                "runAfter": {
                  "Initialize_variable_comment": [
                    "Succeeded"
                  ]
                },
                "type": "Workflow",
                "inputs": {
                  "host": {
                    "triggerName": "manual",
                    "workflow": {
                      "id": "[resourceId('Microsoft.Logic/workflows', parameters('playbook1-LogicAppName'))]"
                    }
                  }
                },
                "description": "This is to call the base logic app to get the access token and falcon host URL"
              },
              "Entities_-_Get_Hosts": {
                "type": "ApiConnection",
                "inputs": {
                  "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/entities/host"
                }
              },
              "HTTP_-_Get_device_id": {
                "type": "Http",
                "inputs": {
                  "method": "GET",
                  "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/queries/devices/v1?filter=hostname:'@{body('Entities_-_Get_Hosts')?['Hosts']?[0]?['HostName']}'",
                  "headers": {
                    "Accept": "application/json",
                    "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                    "Content-Type": "application/json"
                  }
                },
                "runAfter": {
                  "CrowdStrike_Base": [
                    "Succeeded"
                  ]
                },
                "description": "This filters the device id by hostname"
              },
              "Initialize_variable_comment": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "Comment",
                      "type": "string"
                    }
                  ]
                },
                "runAfter": {
                  "Initialize_variable_timestamp": [
                    "Succeeded"
                  ]
                },
                "description": "This holds the variable comment to include in the incident"
              },
              "Initialize_variable_timestamp": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "Timestamp",
                      "type": "string"
                    }
                  ]
                },
                "runAfter": {
                  "Entities_-_Get_Hosts": [
                    "Succeeded"
                  ]
                },
                "description": "Initialize timestamp variable to hold the timestamp"
              },
              "Parse_JSON_Get_device_id_response": {
                "type": "ParseJson",
                "inputs": {
                  "content": "@body('HTTP_-_Get_device_id')",
                  "schema": {
                    "meta": {
                      "pagination": {
                        "limit": 100,
                        "offset": 1,
                        "total": 1
                      },
                      "powered_by": "device-api",
                      "query_time": 0.005041315,
                      "trace_id": "aa7b84f5-3e81-4980-ad9f-c14b6d8ca577"
                    },
                    "resources": [
                      "cdc977a72a8c49528bb82f89dde2c2e9"
                    ]
                  }
                },
                "runAfter": {
                  "HTTP_-_Get_device_id": [
                    "Succeeded"
                  ]
                },
                "description": "prepares json for the device id response"
              }
            },
            "parameters": {
              "$connections": {
                "type": "Object"
              }
            },
            "triggers": {
              "When_Azure_Sentinel_incident_creation_rule_was_triggered_(Private_Preview_only)": {
                "type": "ApiConnectionWebhook",
                "inputs": {
                  "body": {
                    "callback_url": "@{listCallbackUrl()}"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "path": "/incident-creation"
                }
              }
            },
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "$connections": {
              "value": {
                "azuresentinel": {
                  "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-AzureSentinelConnectionName'))]",
                  "connectionName": "[variables('playbook3-AzureSentinelConnectionName')]",
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/azuresentinel')]"
                }
              }
            }
          }
        }
      },
      {
        "type": "Microsoft.Web/connections",
        "apiVersion": "2018-07-01-preview",
        "name": "[variables('playbook4-AzureSentinelConnectionName')]",
        "location": "[parameters('workspace-location')]",
        "properties": {
          "api": {
            "id": "[variables('_playbook-2-connection-2')]"
          }
        }
      },
      {
        "type": "Microsoft.Web/connections",
        "apiVersion": "2018-07-01-preview",
        "name": "[variables('playbook4-TeamsConnectionName')]",
        "location": "[parameters('workspace-location')]",
        "properties": {
          "api": {
            "id": "[variables('_playbook-4-connection-2')]"
          }
        }
      },
      {
        "type": "Microsoft.Logic/workflows",
        "apiVersion": "2019-05-01",
        "name": "[parameters('playbook4-Playbook_Name')]",
        "location": "[parameters('workspace-location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Web/connections', variables('playbook4-AzureSentinelConnectionName'))]",
          "[resourceId('Microsoft.Web/connections', variables('playbook4-TeamsConnectionName'))]",
          "[resourceId('Microsoft.Logic/workflows', parameters('playbook1-LogicAppName'))]"
        ],
        "properties": {
          "state": "Enabled",
          "definition": {
            "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
            "actions": {
              "Add_comment_to_incident_(V3)": {
                "runAfter": {
                  "Compose_image_to_add_in_the_incident": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "incidentArmId": "@triggerBody()?['object']?['id']",
                    "message": "<p>@{outputs('Compose_image_to_add_in_the_incident')} &nbsp;<span style=\"font-size: 16px\"><strong>Crowdstrike_ResponsefromTeams playbook run results :<br>\n</strong></span><span style=\"font-size: 12px\"><strong>Device information:<br>\n</strong></span><span style=\"font-size: 12px\"><strong>@{variables('DeviceInfo')}</strong></span><span style=\"font-size: 12px\"><strong><br>\nActions Taken :</strong></span><br>\n@{variables('ActionTaken')}<br>\n</p>"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/Incidents/Comment"
                },
                "description": "This comments in the incident"
              },
              "Append_to_array_variable_device_actions_to_Ignore": {
                "type": "AppendToArrayVariable",
                "inputs": {
                  "name": "DeviceActions",
                  "value": {
                    "title": "Ignore",
                    "type": "Action.Submit"
                  }
                },
                "runAfter": {
                  "Condition_to_check_if_device_id_returns_results": [
                    "Succeeded"
                  ]
                },
                "description": "appends Ignore option to device actions"
              },
              "Compose_image_to_add_in_the_incident": {
                "type": "Compose",
                "inputs": "<img src=\"https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg\" alt=\"Lamp\" width=\"32\" height=\"32\">\n",
                "runAfter": {
                  "Post_your_own_adaptive_card_as_the_Flow_bot_to_a_channel": [
                    "Succeeded"
                  ]
                },
                "description": "This composes image to be added in the comments of the incident"
              },
              "Condition_to_check_if_SOC_changes_incident_configuration": {
                "type": "If",
                "expression": {
                  "and": [
                    {
                      "not": {
                        "equals": [
                          "@body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['submitActionId']",
                          "Ignore"
                        ]
                      }
                    }
                  ]
                },
                "actions": {
                  "Update_incident": {
                    "type": "ApiConnection",
                    "inputs": {
                      "body": {
                        "classification": {
                          "ClassificationAndReason": "@{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['incidentStatus']}",
                          "ClassificationReasonText": "Crowdstrike_ResponsefromTeams playbook ran and closed this incident"
                        },
                        "incidentArmId": "@triggerBody()?['object']?['id']",
                        "severity": "@{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['incidentSeverity']}",
                        "status": "Closed"
                      },
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                      },
                      "method": "put",
                      "path": "/Incidents"
                    },
                    "description": "This updates the azure sentinel incident"
                  }
                },
                "runAfter": {
                  "Add_comment_to_incident_(V3)": [
                    "Succeeded"
                  ]
                },
                "description": "This checks if SOC changed the incident configuration"
              },
              "Condition_to_check_if_device_id_returns_results": {
                "type": "If",
                "expression": {
                  "and": [
                    {
                      "not": {
                        "equals": [
                          "@body('Parse_JSON_Get_device_id_response')?['resources']?[0]",
                          "@null"
                        ]
                      }
                    }
                  ]
                },
                "actions": {
                  "Condition_to_check_if_any_policies_are_present": {
                    "type": "If",
                    "expression": {
                      "and": [
                        {
                          "not": {
                            "equals": [
                              "@body('Parse_JSON_device_information_response')?['resources']?[0]?['policies']?[0]",
                              "@null"
                            ]
                          }
                        }
                      ]
                    },
                    "actions": {
                      "Append_to_array_variable_adaptive_card_body_policies": {
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "Adaptivecardbody",
                          "value": {
                            "columns": [
                              {
                                "items": "@body('Select_policies_to_display_in_the_adaptive_card')",
                                "type": "Column"
                              }
                            ],
                            "type": "ColumnSet"
                          }
                        },
                        "runAfter": {
                          "Append_to_array_variable_adaptive_card_policy_text": [
                            "Succeeded"
                          ]
                        },
                        "description": "This appends the list of policies to display in adaptive card"
                      },
                      "Append_to_array_variable_adaptive_card_policy_text": {
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "Adaptivecardbody",
                          "value": {
                            "text": "Applied policies on this host:",
                            "type": "TextBlock"
                          }
                        },
                        "runAfter": {
                          "Select_policies_to_display_in_the_adaptive_card": [
                            "Succeeded"
                          ]
                        },
                        "description": "This appends text to adaptive card body for policy text"
                      },
                      "Select_policies_to_display_in_the_adaptive_card": {
                        "type": "Select",
                        "inputs": {
                          "from": "@body('Parse_JSON_device_information_response')?['resources']?[0]?['policies']",
                          "select": {
                            "text": "@item()?['policy_type']",
                            "type": "TextBlock"
                          }
                        },
                        "description": "This composes the policies to be displayed on the adaptive card"
                      }
                    },
                    "runAfter": {
                      "Switch_to_check_the_status_of_the_host": [
                        "Succeeded"
                      ]
                    },
                    "else": {
                      "actions": {
                        "Append_to_array_variable_if_no_policies_are_present": {
                          "type": "AppendToArrayVariable",
                          "inputs": {
                            "name": "Adaptivecardbody",
                            "value": {
                              "text": "There are no policies applied for this host",
                              "type": "TextBlock"
                            }
                          },
                          "description": "This appends text to adaptive card body if no policies are present"
                        }
                      }
                    },
                    "description": "This checks if any policies are present"
                  },
                  "Create_HTML_table_for_device_information": {
                    "type": "Table",
                    "inputs": {
                      "from": "@body('Parse_JSON_device_information_response')?['resources']",
                      "format": "HTML",
                      "columns": [
                        {
                          "header": "device_id",
                          "value": "@item()?['device_id']"
                        },
                        {
                          "header": "external_ip",
                          "value": "@item()?['external_ip']"
                        },
                        {
                          "header": "mac_address",
                          "value": "@item()?['mac_address']"
                        },
                        {
                          "header": "hostname",
                          "value": "@item()?['hostname']"
                        },
                        {
                          "header": "first_seen",
                          "value": "@item()?['first_seen']"
                        },
                        {
                          "header": "last_seen",
                          "value": "@item()?['last_seen']"
                        },
                        {
                          "header": "local_ip",
                          "value": "@item()?['local_ip']"
                        },
                        {
                          "header": "machine_domain",
                          "value": "@item()?['machine_domain']"
                        },
                        {
                          "header": "os_version",
                          "value": "@item()?['os_version']"
                        }
                      ]
                    },
                    "runAfter": {
                      "Parse_JSON_device_information_response": [
                        "Succeeded"
                      ]
                    },
                    "description": "prepare html table of device information"
                  },
                  "HTTP_-_Get_device_information": {
                    "type": "Http",
                    "inputs": {
                      "method": "GET",
                      "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/entities/devices/v1?ids=@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}",
                      "headers": {
                        "Accept": "application/json",
                        "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                        "Content-Type": "application/json"
                      }
                    },
                    "description": "This gets the device information from crowdstrike"
                  },
                  "Parse_JSON_device_information_response": {
                    "type": "ParseJson",
                    "inputs": {
                      "content": "@body('HTTP_-_Get_device_information')",
                      "schema": {
                        "properties": {
                          "errors": {
                            "type": "array"
                          },
                          "meta": {
                            "properties": {
                              "powered_by": {
                                "type": "string"
                              },
                              "query_time": {
                                "type": "number"
                              },
                              "trace_id": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "resources": {
                            "items": {
                              "properties": {
                                "agent_load_flags": {
                                  "type": "string"
                                },
                                "agent_local_time": {
                                  "type": "string"
                                },
                                "agent_version": {
                                  "type": "string"
                                },
                                "bios_manufacturer": {
                                  "type": "string"
                                },
                                "bios_version": {
                                  "type": "string"
                                },
                                "build_number": {
                                  "type": "string"
                                },
                                "cid": {
                                  "type": "string"
                                },
                                "config_id_base": {
                                  "type": "string"
                                },
                                "config_id_build": {
                                  "type": "string"
                                },
                                "config_id_platform": {
                                  "type": "string"
                                },
                                "cpu_signature": {
                                  "type": "string"
                                },
                                "device_id": {
                                  "type": "string"
                                },
                                "device_policies": {
                                  "properties": {
                                    "device_control": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "firewall": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "rule_set_id": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "global_config": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "prevention": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "rule_groups": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "remote_response": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "applied_date": {
                                          "type": "string"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "sensor_update": {
                                      "properties": {
                                        "applied": {
                                          "type": "boolean"
                                        },
                                        "assigned_date": {
                                          "type": "string"
                                        },
                                        "policy_id": {
                                          "type": "string"
                                        },
                                        "policy_type": {
                                          "type": "string"
                                        },
                                        "settings_hash": {
                                          "type": "string"
                                        },
                                        "uninstall_protection": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "external_ip": {
                                  "type": "string"
                                },
                                "first_seen": {
                                  "type": "string"
                                },
                                "group_hash": {
                                  "type": "string"
                                },
                                "groups": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "hostname": {
                                  "type": "string"
                                },
                                "last_seen": {
                                  "type": "string"
                                },
                                "local_ip": {
                                  "type": "string"
                                },
                                "mac_address": {
                                  "type": "string"
                                },
                                "machine_domain": {
                                  "type": "string"
                                },
                                "major_version": {
                                  "type": "string"
                                },
                                "meta": {
                                  "properties": {
                                    "version": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "minor_version": {
                                  "type": "string"
                                },
                                "modified_timestamp": {
                                  "type": "string"
                                },
                                "os_version": {
                                  "type": "string"
                                },
                                "ou": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "platform_id": {
                                  "type": "string"
                                },
                                "platform_name": {
                                  "type": "string"
                                },
                                "pointer_size": {
                                  "type": "string"
                                },
                                "policies": {
                                  "items": {
                                    "properties": {
                                      "applied": {
                                        "type": "boolean"
                                      },
                                      "applied_date": {
                                        "type": "string"
                                      },
                                      "assigned_date": {
                                        "type": "string"
                                      },
                                      "policy_id": {
                                        "type": "string"
                                      },
                                      "policy_type": {
                                        "type": "string"
                                      },
                                      "rule_groups": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "settings_hash": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "policy_type",
                                      "policy_id",
                                      "applied",
                                      "settings_hash",
                                      "assigned_date",
                                      "applied_date",
                                      "rule_groups"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "product_type": {
                                  "type": "string"
                                },
                                "product_type_desc": {
                                  "type": "string"
                                },
                                "provision_status": {
                                  "type": "string"
                                },
                                "reduced_functionality_mode": {
                                  "type": "string"
                                },
                                "serial_number": {
                                  "type": "string"
                                },
                                "service_pack_major": {
                                  "type": "string"
                                },
                                "service_pack_minor": {
                                  "type": "string"
                                },
                                "site_name": {
                                  "type": "string"
                                },
                                "slow_changing_modified_timestamp": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "system_manufacturer": {
                                  "type": "string"
                                },
                                "system_product_name": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "array"
                                }
                              },
                              "required": [
                                "device_id",
                                "cid",
                                "agent_load_flags",
                                "agent_local_time",
                                "agent_version",
                                "bios_manufacturer",
                                "bios_version",
                                "build_number",
                                "config_id_base",
                                "config_id_build",
                                "config_id_platform",
                                "cpu_signature",
                                "external_ip",
                                "mac_address",
                                "hostname",
                                "first_seen",
                                "last_seen",
                                "local_ip",
                                "major_version",
                                "minor_version",
                                "os_version",
                                "platform_id",
                                "platform_name",
                                "policies",
                                "reduced_functionality_mode",
                                "device_policies",
                                "groups",
                                "group_hash",
                                "product_type",
                                "product_type_desc",
                                "provision_status",
                                "serial_number",
                                "service_pack_major",
                                "service_pack_minor",
                                "pointer_size",
                                "status",
                                "system_manufacturer",
                                "system_product_name",
                                "tags",
                                "modified_timestamp",
                                "slow_changing_modified_timestamp",
                                "meta"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "runAfter": {
                      "HTTP_-_Get_device_information": [
                        "Succeeded"
                      ]
                    },
                    "description": "prepare json for device information"
                  },
                  "Set_variable_adaptive_card_body_if_host_is_present": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Adaptivecardbody",
                      "value": [
                        {
                          "size": "large",
                          "text": "Suspicious Device - Azure Sentinel",
                          "type": "TextBlock",
                          "weight": "bolder",
                          "wrap": true
                        },
                        {
                          "text": "Possible comprised device detected by the provider ",
                          "type": "TextBlock",
                          "wrap": true
                        },
                        {
                          "text": " @{triggerBody()?['object']?['properties']?['severity']} Incident - CrowdStrike actions @{triggerBody()?['object']?['properties']?['title']}",
                          "type": "TextBlock",
                          "weight": "Bolder",
                          "wrap": true
                        },
                        {
                          "text": " Incident No  :  @{triggerBody()?['object']?['properties']?['incidentNumber']} ",
                          "type": "TextBlock",
                          "weight": "Bolder",
                          "wrap": true
                        },
                        {
                          "text": "Incident description",
                          "type": "TextBlock",
                          "weight": "Bolder",
                          "wrap": true
                        },
                        {
                          "text": "@{triggerBody()?['object']?['properties']?['description']}",
                          "type": "TextBlock",
                          "wrap": true
                        },
                        {
                          "text": "[[Click here to view the Incident](@{triggerBody()?['object']?['properties']?['incidentUrl']})",
                          "type": "TextBlock",
                          "wrap": true
                        },
                        {
                          "size": "Small",
                          "style": "Person",
                          "type": "Image",
                          "url": "https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg"
                        },
                        {
                          "text": "CrowdStrike host information",
                          "type": "TextBlock",
                          "weight": "Bolder"
                        },
                        {
                          "text": "Hostname: @{body('Parse_JSON_device_information_response')?['resources']?[0]?['hostname']}",
                          "type": "TextBlock",
                          "weight": "Bolder"
                        },
                        {
                          "text": "local_ip: @{body('Parse_JSON_device_information_response')?['resources']?[0]?['local_ip']} ",
                          "type": "TextBlock"
                        },
                        {
                          "text": "machine_domain: @{body('Parse_JSON_device_information_response')?['resources']?[0]?['machine_domain']} ",
                          "type": "TextBlock"
                        },
                        {
                          "text": "os_version:  @{body('Parse_JSON_device_information_response')?['resources']?[0]?['os_version']} ",
                          "type": "TextBlock"
                        }
                      ]
                    },
                    "runAfter": {
                      "Set_variable_device_info": [
                        "Succeeded"
                      ]
                    },
                    "description": "set adaptive card body with host information if host is present"
                  },
                  "Set_variable_device_info": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "DeviceInfo",
                      "value": "@body('Create_HTML_table_for_device_information')"
                    },
                    "runAfter": {
                      "Create_HTML_table_for_device_information": [
                        "Succeeded"
                      ]
                    },
                    "description": "sets device info to comment in the incident"
                  },
                  "Switch_to_check_the_status_of_the_host": {
                    "type": "Switch",
                    "expression": "@body('Parse_JSON_device_information_response')?['resources']?[0]?['status']",
                    "cases": {
                      "Case_-_conatined": {
                        "case": "contained",
                        "actions": {
                          "Append_to_array_variable_adaptive_card_body_if_host_is_contained": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "Adaptivecardbody",
                              "value": {
                                "text": "Host status is contained",
                                "type": "TextBlock",
                                "weight": "Bolder",
                                "wrap": true
                              }
                            },
                            "description": "This appends adaptive card body if host is contained"
                          },
                          "Append_to_array_variable_device_actions_if_status_is_contained": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "DeviceActions",
                              "value": {
                                "title": "Lift Containment",
                                "type": "Action.Submit"
                              }
                            },
                            "runAfter": {
                              "Append_to_array_variable_adaptive_card_body_if_host_is_contained": [
                                "Succeeded"
                              ]
                            }
                          }
                        }
                      },
                      "Case_-_containment_pending": {
                        "case": "containment_pending",
                        "actions": {
                          "Append_to_array_variable_adaptive_card_body_if_containment_pending_status": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "Adaptivecardbody",
                              "value": {
                                "text": "Host status is in the process of moving from un-contained to contained",
                                "type": "TextBlock",
                                "weight": "Bolder",
                                "wrap": true
                              }
                            },
                            "runAfter": {
                              "Set_variable_device_actions_to_empty_for_containment_pending": [
                                "Succeeded"
                              ]
                            },
                            "description": "This appends adaptive card body if host status is containment pending"
                          },
                          "Set_variable_device_actions_to_empty_for_containment_pending": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "DeviceActions",
                              "value": [
                                {
                                  "title": "Submit",
                                  "type": "Action.Submit"
                                }
                              ]
                            },
                            "description": "This sets the device actions if status is containment pending"
                          }
                        }
                      },
                      "Case_-_lift_containment_pending": {
                        "case": "lift_containment_pending",
                        "actions": {
                          "Append_to_array_variable_adaptive_card_body_if_lift_containment_pending_status": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "Adaptivecardbody",
                              "value": {
                                "text": "Host status is in the process of moving from contained to un-contained",
                                "type": "TextBlock",
                                "weight": "Bolder",
                                "wrap": true
                              }
                            },
                            "runAfter": {
                              "Set_variable_device_actions_to_empty_for_lift_containment_pending": [
                                "Succeeded"
                              ]
                            },
                            "description": "This appends adaptive card body if host status is lift containment pending"
                          },
                          "Set_variable_device_actions_to_empty_for_lift_containment_pending": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "DeviceActions",
                              "value": [
                                {
                                  "title": "Submit",
                                  "type": "Action.Submit"
                                }
                              ]
                            },
                            "description": "This sets the device actions if status is lift containment pending"
                          }
                        }
                      },
                      "Case_-_not_contained": {
                        "case": "normal",
                        "actions": {
                          "Append_to_array_variable_adaptive_card_body_for_normal_status": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "Adaptivecardbody",
                              "value": {
                                "text": "Host is not contained",
                                "type": "TextBlock",
                                "weight": "Bolder",
                                "wrap": true
                              }
                            },
                            "description": "This appends text to adaptive card body if host is not contained"
                          },
                          "Append_to_array_variable_device_actions": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "DeviceActions",
                              "value": {
                                "title": "Contain",
                                "type": "Action.Submit"
                              }
                            },
                            "runAfter": {
                              "Append_to_array_variable_adaptive_card_body_for_normal_status": [
                                "Succeeded"
                              ]
                            }
                          },
                          "Condition_to_check_the_scripts": {
                            "type": "If",
                            "expression": {
                              "and": [
                                {
                                  "not": {
                                    "equals": [
                                      "@body('Parse_JSON_get_scripts_response')?['resources']?[0]",
                                      "@null"
                                    ]
                                  }
                                }
                              ]
                            },
                            "actions": {
                              "Append_to_array_variable_device_actions_to_contain": {
                                "type": "AppendToArrayVariable",
                                "inputs": {
                                  "name": "DeviceActions",
                                  "value": {
                                    "card": {
                                      "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                                      "actions": [
                                        {
                                          "title": "Run",
                                          "type": "Action.Submit"
                                        }
                                      ],
                                      "body": [
                                        {
                                          "text": "Choose a script to run ",
                                          "type": "TextBlock",
                                          "wrap": true
                                        },
                                        {
                                          "choices": "@variables('Scriptoptions')",
                                          "id": "script",
                                          "type": "Input.ChoiceSet"
                                        }
                                      ],
                                      "type": "AdaptiveCard"
                                    },
                                    "title": "Run Script",
                                    "type": "Action.ShowCard"
                                  }
                                },
                                "runAfter": {
                                  "Set_variable_script_options": [
                                    "Succeeded"
                                  ]
                                },
                                "description": "This sets the device actions to contain"
                              },
                              "Select_script_names_to_display_in_the_adaptive_card_dropdown": {
                                "type": "Select",
                                "inputs": {
                                  "from": "@body('Parse_JSON_get_scripts_response')?['resources']",
                                  "select": {
                                    "title": "@item()?['name']",
                                    "value": "@item()?['name']"
                                  }
                                },
                                "description": "This selects all the script names to display in the adaptive card"
                              },
                              "Set_variable_script_options": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Scriptoptions",
                                  "value": "@body('Select_script_names_to_display_in_the_adaptive_card_dropdown')"
                                },
                                "runAfter": {
                                  "Select_script_names_to_display_in_the_adaptive_card_dropdown": [
                                    "Succeeded"
                                  ]
                                },
                                "description": "This sets the script names to script options variable"
                              }
                            },
                            "runAfter": {
                              "Parse_JSON_get_scripts_response": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Append_to_array_variable_adaptive_card_body_if_no_scripts_are_present": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Adaptivecardbody",
                                    "value": {
                                      "text": "There are no scripts to run ",
                                      "type": "TextBlock",
                                      "wrap": true
                                    }
                                  },
                                  "runAfter": {
                                    "Append_to_array_variable_device_actions_if_no_scripts_are_available": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "appends adaptive carb body text if no scripts are present"
                                },
                                "Append_to_array_variable_device_actions_if_no_scripts_are_available": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "DeviceActions",
                                    "value": {}
                                  },
                                  "runAfter": {
                                    "Set_variable_script_options_to_empty_if_no_scripts_are_available": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "appends device actions to empty if no scripts were run"
                                },
                                "Set_variable_script_options_to_empty_if_no_scripts_are_available": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Scriptoptions",
                                    "value": []
                                  },
                                  "description": "This sets the script options to null if no scripts are present"
                                }
                              }
                            },
                            "description": "condition to check if scripts are present in the device"
                          },
                          "HTTP_-_Get_Scripts": {
                            "type": "Http",
                            "inputs": {
                              "method": "GET",
                              "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/real-time-response/entities/scripts/v1",
                              "headers": {
                                "Accept": "application/json",
                                "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                                "Content-Type": "application/json"
                              }
                            },
                            "runAfter": {
                              "Append_to_array_variable_device_actions": [
                                "Succeeded"
                              ]
                            },
                            "description": "This gets the list of scripts in the falcon host"
                          },
                          "Parse_JSON_get_scripts_response": {
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('HTTP_-_Get_Scripts')",
                              "schema": {
                                "properties": {
                                  "body": {
                                    "properties": {
                                      "meta": {
                                        "properties": {
                                          "powered_by": {
                                            "type": "string"
                                          },
                                          "query_time": {
                                            "type": "number"
                                          },
                                          "trace_id": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "resources": {
                                        "items": {
                                          "properties": {
                                            "content": {
                                              "type": "string"
                                            },
                                            "created_by": {
                                              "type": "string"
                                            },
                                            "created_by_uuid": {
                                              "type": "string"
                                            },
                                            "created_timestamp": {
                                              "type": "string"
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "file_type": {
                                              "type": "string"
                                            },
                                            "id": {
                                              "type": "string"
                                            },
                                            "modified_by": {
                                              "type": "string"
                                            },
                                            "modified_timestamp": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "permission_type": {
                                              "type": "string"
                                            },
                                            "platform": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "run_attempt_count": {
                                              "type": "integer"
                                            },
                                            "run_success_count": {
                                              "type": "integer"
                                            },
                                            "sha256": {
                                              "type": "string"
                                            },
                                            "size": {
                                              "type": "integer"
                                            },
                                            "write_access": {
                                              "type": "boolean"
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "name",
                                            "description",
                                            "file_type",
                                            "platform",
                                            "size",
                                            "content",
                                            "created_by",
                                            "created_by_uuid",
                                            "created_timestamp",
                                            "modified_by",
                                            "modified_timestamp",
                                            "sha256",
                                            "permission_type",
                                            "run_attempt_count",
                                            "run_success_count",
                                            "write_access"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "headers": {
                                    "properties": {
                                      "Content-Length": {
                                        "type": "string"
                                      },
                                      "Content-Type": {
                                        "type": "string"
                                      },
                                      "Date": {
                                        "type": "string"
                                      },
                                      "X-Cs-Region": {
                                        "type": "string"
                                      },
                                      "X-Ratelimit-Limit": {
                                        "type": "string"
                                      },
                                      "X-Ratelimit-Remaining": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "statusCode": {
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "runAfter": {
                              "HTTP_-_Get_Scripts": [
                                "Succeeded"
                              ]
                            },
                            "description": "prepare Json for get script response body"
                          }
                        }
                      }
                    },
                    "runAfter": {
                      "Set_variable_adaptive_card_body_if_host_is_present": [
                        "Succeeded"
                      ]
                    },
                    "description": "This checks the status on the host"
                  }
                },
                "runAfter": {
                  "Parse_JSON_Get_device_id_response": [
                    "Succeeded"
                  ]
                },
                "else": {
                  "actions": {
                    "Append_to_array_variable_action_summary_if_no_devices_are_present": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "ActionSummary",
                        "value": {
                          "text": "No devices are present",
                          "type": "TextBlock"
                        }
                      },
                      "runAfter": {
                        "Append_to_array_variable_device_actions_if_no_devices_are_present": [
                          "Succeeded"
                        ]
                      },
                      "description": "appends action summary if no devices are present"
                    },
                    "Append_to_array_variable_device_actions_if_no_devices_are_present": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "DeviceActions",
                        "value": {
                          "title": "Submit",
                          "type": "Action.Submit"
                        }
                      },
                      "runAfter": {
                        "Set_variable_device_info_if_no_devices_are_present": [
                          "Succeeded"
                        ]
                      },
                      "description": "appends device actions if no devices are present"
                    },
                    "Append_to_string_variable_action_taken_if_no_devices_are_present": {
                      "type": "AppendToStringVariable",
                      "inputs": {
                        "name": "ActionTaken",
                        "value": "No devices are present..So no action taken on device"
                      },
                      "runAfter": {
                        "Append_to_array_variable_action_summary_if_no_devices_are_present": [
                          "Succeeded"
                        ]
                      },
                      "description": "appends action taken if no devices are present"
                    },
                    "Set_variable_adaptive_card_body_if_no_devices_are_present": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Adaptivecardbody",
                        "value": [
                          {
                            "size": "large",
                            "text": "Suspicious Device - Azure Sentinel",
                            "type": "TextBlock",
                            "weight": "bolder",
                            "wrap": true
                          },
                          {
                            "text": "Possible comprised device detected by the provider ",
                            "type": "TextBlock",
                            "wrap": true
                          },
                          {
                            "text": " @{triggerBody()?['object']?['properties']?['severity']} Incident @{triggerBody()?['object']?['properties']?['title']} ",
                            "type": "TextBlock",
                            "weight": "Bolder",
                            "wrap": true
                          },
                          {
                            "text": " Incident No  :  @{triggerBody()?['object']?['properties']?['incidentNumber']} ",
                            "type": "TextBlock",
                            "weight": "Bolder",
                            "wrap": true
                          },
                          {
                            "text": "Incident description",
                            "type": "TextBlock",
                            "weight": "Bolder",
                            "wrap": true
                          },
                          {
                            "text": "@{triggerBody()?['object']?['properties']?['description']}",
                            "type": "TextBlock",
                            "wrap": true
                          },
                          {
                            "text": "[[Click here to view the Incident](@{triggerBody()?['object']?['properties']?['incidentUrl']})",
                            "type": "TextBlock",
                            "wrap": true
                          },
                          {
                            "size": "Small",
                            "style": "Person",
                            "type": "Image",
                            "url": "https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg"
                          },
                          {
                            "text": "CrowdStrike",
                            "type": "TextBlock",
                            "weight": "Bolder"
                          },
                          {
                            "text": "Hostname : @{body('Entities_-_Get_Hosts')?['Hosts']?[0]?['HostName']}",
                            "type": "TextBlock",
                            "weight": "Bolder"
                          },
                          {
                            "text": "There are no devices present ",
                            "type": "TextBlock",
                            "weight": "Bolder"
                          }
                        ]
                      },
                      "description": "prepare adaptive card body if no devices are present"
                    },
                    "Set_variable_device_info_if_no_devices_are_present": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "DeviceInfo",
                        "value": "No devices are present"
                      },
                      "runAfter": {
                        "Set_variable_adaptive_card_body_if_no_devices_are_present": [
                          "Succeeded"
                        ]
                      },
                      "description": "sets device info to comment in the incident"
                    }
                  }
                },
                "description": "This checks if device id is present in crowdstrike"
              },
              "CrowdStrike_Base": {
                "runAfter": {
                  "Initialize_variable_actions_taken": [
                    "Succeeded"
                  ]
                },
                "type": "Workflow",
                "inputs": {
                  "host": {
                    "triggerName": "manual",
                    "workflow": {
                      "id": "[resourceId('Microsoft.Logic/workflows', parameters('playbook1-LogicAppName'))]"
                    }
                  }
                },
                "description": "call to base logic app to get the access token and Falcon host URL",
                "runtimeConfiguration": {
                  "secureData": {
                    "properties": [
                      "inputs",
                      "outputs"
                    ]
                  }
                }
              },
              "CrowdStrike_Base_call_after_SOC_responds": {
                "runAfter": {
                  "Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response": [
                    "Succeeded"
                  ]
                },
                "type": "Workflow",
                "inputs": {
                  "host": {
                    "triggerName": "manual",
                    "workflow": {
                      "id": "[resourceId('Microsoft.Logic/workflows', parameters('playbook1-LogicAppName'))]"
                    }
                  }
                },
                "description": "This calls the crowdstrike base playbook where we will generate the authentication key again as it expires every 30 mins",
                "runtimeConfiguration": {
                  "secureData": {
                    "properties": [
                      "inputs",
                      "outputs"
                    ]
                  }
                }
              },
              "Entities_-_Get_Hosts": {
                "type": "ApiConnection",
                "inputs": {
                  "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/entities/host"
                }
              },
              "HTTP_-_Get_device_id": {
                "type": "Http",
                "inputs": {
                  "method": "GET",
                  "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/queries/devices/v1?filter=hostname:'@{body('Entities_-_Get_Hosts')?['Hosts']?[0]?['HostName']}'",
                  "headers": {
                    "Accept": "application/json",
                    "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                    "Content-Type": "application/json"
                  }
                },
                "runAfter": {
                  "CrowdStrike_Base": [
                    "Succeeded"
                  ]
                },
                "description": "This filters the device id by hostname"
              },
              "Initialize_variable_action_summary": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "ActionSummary",
                      "type": "array",
                      "value": []
                    }
                  ]
                },
                "runAfter": {
                  "Initialize_variable_adaptive_card_body": [
                    "Succeeded"
                  ]
                },
                "description": "variable to store action summary json to display in summarized adaptive card"
              },
              "Initialize_variable_actions_taken": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "ActionTaken",
                      "type": "string"
                    }
                  ]
                },
                "runAfter": {
                  "Initialize_variable_script_options": [
                    "Succeeded"
                  ]
                }
              },
              "Initialize_variable_adaptive_card_body": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "Adaptivecardbody",
                      "type": "array",
                      "value": []
                    }
                  ]
                },
                "runAfter": {
                  "Entities_-_Get_Hosts": [
                    "Succeeded"
                  ]
                },
                "description": "variable to store adaptive card body json"
              },
              "Initialize_variable_device_actions": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "DeviceActions",
                      "type": "array",
                      "value": []
                    }
                  ]
                },
                "runAfter": {
                  "Initialize_variable_action_summary": [
                    "Succeeded"
                  ]
                },
                "description": "variable to store device actions such as contain/lift containment or Ignore"
              },
              "Initialize_variable_device_information": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "DeviceInfo",
                      "type": "string"
                    }
                  ]
                },
                "runAfter": {
                  "Initialize_variable_device_actions": [
                    "Succeeded"
                  ]
                },
                "description": "variable to store device information"
              },
              "Initialize_variable_script_options": {
                "type": "InitializeVariable",
                "inputs": {
                  "variables": [
                    {
                      "name": "Scriptoptions",
                      "type": "array",
                      "value": []
                    }
                  ]
                },
                "runAfter": {
                  "Initialize_variable_device_information": [
                    "Succeeded"
                  ]
                },
                "description": "This holds the script options such as script names and Ignore"
              },
              "Parse_JSON_Get_device_id_response": {
                "type": "ParseJson",
                "inputs": {
                  "content": "@body('HTTP_-_Get_device_id')",
                  "schema": {
                    "meta": {
                      "pagination": {
                        "limit": 100,
                        "offset": 1,
                        "total": 1
                      },
                      "powered_by": "device-api",
                      "query_time": 0.005041315,
                      "trace_id": "aa7b84f5-3e81-4980-ad9f-c14b6d8ca577"
                    },
                    "resources": [
                      "cdc977a72a8c49528bb82f89dde2c2e9"
                    ]
                  }
                },
                "runAfter": {
                  "HTTP_-_Get_device_id": [
                    "Succeeded"
                  ]
                },
                "description": "prepare json from get device id response"
              },
              "Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response": {
                "runAfter": {
                  "Append_to_array_variable_device_actions_to_Ignore": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnectionWebhook",
                "inputs": {
                  "body": {
                    "body": {
                      "messageBody": "{\n    \"type\": \"AdaptiveCard\",\n    \"body\":[\n{\n  \"columns\": [\n    {\n      \"items\": @{variables('Adaptivecardbody')},\n      \"type\": \"Column\"\n    }\n  ],\n  \"type\": \"ColumnSet\"\n},\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [{    \"type\": \"Column\",    \"items\": [        {            \"type\": \"TextBlock\",            \"size\": \"Medium\",            \"weight\": \"Bolder\",            \"text\": \"Incident configuration :\",            \"wrap\": true        }    ],    \"width\": \"auto\"}\n            ]\n        },\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [{    \"type\": \"Column\",    \"items\": [        {            \"type\": \"Image\",            \"style\": \"Person\",            \"url\": \"https://connectoricons-prod.azureedge.net/releases/v1.0.1391/1.0.1391.2130/azuresentinel/icon.png\",            \"size\": \"Small\"        }    ],    \"width\": \"auto\"}\n            ]\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Close Azure Sentinal incident?\"\n        },\n        {\n            \"choices\": [{    \"isSelected\": true,    \"title\": \"False Positive - Inaccurate Data\",    \"value\": \"False Positive - Inaccurate Data\"},{    \"isSelected\": true,    \"title\": \"False Positive - Incorrect Alert Logic\",    \"value\": \"False Positive - Incorrect Alert Logic\"},{    \"title\": \"True Positive - Suspicious Activity\",    \"value\": \"True Positive - Suspicious Activity\"},{    \"title\": \"Benign Positive - Suspicious But Expected\",    \"value\": \"Benign Positive - Suspicious But Expected\"},{    \"title\": \"Undetermined\",    \"value\": \"Undetermined\"}\n            ],\n            \"id\": \"incidentStatus\",\n            \"style\": \"compact\",\n            \"type\": \"Input.ChoiceSet\",\n            \"value\": \"Benign Positive - Suspicious But Expected\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Change Azure Sentinel Incident Severity?\"\n        },\n        {\n            \"choices\": [{      \"title\": \"High\",    \"value\": \"High\"},{    \"title\": \"Medium\",    \"value\": \"Medium\"},{    \"title\": \"Low\",    \"value\": \"Low\"},{    \"title\": \"Don't change\",    \"value\": \"same\"}\n            ],\n            \"id\": \"incidentSeverity\",\n            \"style\": \"compact\",\n            \"type\": \"Input.ChoiceSet\",\n            \"value\": \"@{triggerBody()?['object']?['properties']?['severity']}\"\n        }\n],\n\t\"actions\": @{variables('DeviceActions')},\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"version\": \"1.2\"\n}",
                      "recipient": {
                        "channelId": "[parameters('playbook4-Teams_ChannelId')]"
                      },
                      "shouldUpdateCard": true
                    },
                    "notificationUrl": "@{listCallbackUrl()}"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['teams']['connectionId']"
                    }
                  },
                  "path": "/flowbot/actions/flowcontinuation/recipienttypes/channel/$subscriptions",
                  "queries": {
                    "groupId": "[parameters('playbook4-Teams_GroupId')]"
                  }
                }
              },
              "Post_your_own_adaptive_card_as_the_Flow_bot_to_a_channel": {
                "runAfter": {
                  "Switch_to_take_action_on_device_based_on_SOC_choice": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection",
                "inputs": {
                  "body": {
                    "messageBody": "{\n    \"type\": \"AdaptiveCard\",\n    \"body\": [\n  {\n    \"size\": \"large\",\n    \"text\": \"Suspicious Device - Azure Sentinel\",\n    \"type\": \"TextBlock\",\n    \"weight\": \"bolder\",\n    \"wrap\": true\n  },\n  {\n    \"text\": \"Possible comprised device detected by the provider \",\n    \"type\": \"TextBlock\",\n    \"wrap\": true\n  },\n  {\n    \"text\": \" @{triggerBody()?['object']?['properties']?['severity']} Incident @{triggerBody()?['object']?['properties']?['title']} \",\n    \"type\": \"TextBlock\",\n    \"weight\": \"Bolder\",\n    \"wrap\": true\n  },\n  {\n    \"text\": \" Incident No :  @{triggerBody()?['object']?['properties']?['incidentNumber']} \",\n    \"type\": \"TextBlock\",\n    \"weight\": \"Bolder\",\n    \"wrap\": true\n  },\n  {\n    \"text\": \"Incident description\",\n    \"type\": \"TextBlock\",\n    \"weight\": \"Bolder\",\n    \"wrap\": true\n  },\n  {\n    \"text\": \"@{triggerBody()?['object']?['properties']?['description']}\",\n    \"type\": \"TextBlock\",\n    \"wrap\": true\n  },\n  {\n    \"text\": \"[Click here to view the Incident](@{triggerBody()?['object']?['properties']?['incidentUrl']})\",\n    \"type\": \"TextBlock\",\n    \"wrap\": true\n  },\n  {\n    \"size\": \"Small\",\n    \"style\": \"Person\",\n    \"type\": \"Image\",\n    \"url\": \"https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg\"\n  },\n        {\n            \"type\": \"TextBlock\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Below is the summary of actions taken by SOC\",\n            \"wrap\": true\n        },\n {\n            \"type\": \"TextBlock\",\n            \"weight\": \"Bolder\",\n             \"text\": \"Hostname : @{body('Entities_-_Get_Hosts')?['Hosts']?[0]?['HostName']}\",\n             \"wrap\": true\n        },\n    {\n  \"columns\": [\n    {\n      \"items\": @{variables('ActionSummary')},\n      \"type\": \"Column\",\n      \"wrap\": true\n    }\n  ],\n  \"separator\": \"true\",\n  \"type\": \"ColumnSet\",\n  \"width\": \"stretch\"\n}\n ],\n\"width\":\"auto\",\n \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n \"version\": \"1.2\"\n}",
                    "recipient": {
                      "channelId": "[parameters('playbook4-Teams_ChannelId')]"
                    }
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['teams']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/flowbot/actions/adaptivecard/recipienttypes/channel",
                  "queries": {
                    "groupId": "[parameters('playbook4-Teams_GroupId')]"
                  }
                },
                "description": "This posts a summarized adaptive card to SOC"
              },
              "Switch_to_take_action_on_device_based_on_SOC_choice": {
                "type": "Switch",
                "expression": "@body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['submitActionId']",
                "cases": {
                  "Case": {
                    "case": "Submit",
                    "actions": {
                      "Append_to_array_variable_action_summary_in_case_of_submit": {
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "ActionSummary",
                          "value": {
                            "text": "No actions taken on the host",
                            "type": "TextBlock"
                          }
                        },
                        "description": "appends action summary in case of submit"
                      },
                      "Append_to_string_variable_action_taken_in_case_of_submit": {
                        "type": "AppendToStringVariable",
                        "inputs": {
                          "name": "ActionTaken",
                          "value": "No actions taken on the host"
                        },
                        "runAfter": {
                          "Append_to_array_variable_action_summary_in_case_of_submit": [
                            "Succeeded"
                          ]
                        },
                        "description": "appends action taken in case of submit"
                      }
                    }
                  },
                  "Case_-_Contain_a_host": {
                    "case": "Contain",
                    "actions": {
                      "Condition_to_check_if_contain_success_or_not": {
                        "type": "If",
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@outputs('HTTP_Contain_a_device')['statusCode']",
                                202
                              ]
                            }
                          ]
                        },
                        "actions": {
                          "Append_to_array_variable_action_summary_in_case_of_contain_success": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "ActionSummary",
                              "value": {
                                "text": " @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['submitActionId']}  the device , Status : Success",
                                "type": "TextBlock"
                              }
                            },
                            "description": "This appends action summary in case of contain a host success"
                          },
                          "Append_to_string_variable_action_taken_in_case_of_contain_success": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "ActionTaken",
                              "value": " @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['submitActionId']} the device , Status : Success"
                            },
                            "runAfter": {
                              "Append_to_array_variable_action_summary_in_case_of_contain_success": [
                                "Succeeded"
                              ]
                            },
                            "description": "This appends action taken in case of contain a host success"
                          }
                        },
                        "runAfter": {
                          "HTTP_Contain_a_device": [
                            "Succeeded"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Append_to_array_variable_action_summary_in_case_of_contain_failure": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "ActionSummary",
                                "value": {
                                  "text": " @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['submitActionId']} device , Status : Failed , Error : @{body('HTTP_Contain_a_device')?['errors']} , Statuscode : @{outputs('HTTP_Contain_a_device')['statusCode']}",
                                  "type": "TextBlock"
                                }
                              },
                              "description": "This appends action summary in case of contain a host failure"
                            },
                            "Append_to_string_variable_in_case_of_contain_failure": {
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "ActionTaken",
                                "value": " @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['submitActionId']} device , Status : Failed , Error : @{body('HTTP_Contain_a_device')?['errors']} , Statuscode : @{outputs('HTTP_Contain_a_device')['statusCode']}"
                              },
                              "runAfter": {
                                "Append_to_array_variable_action_summary_in_case_of_contain_failure": [
                                  "Succeeded"
                                ]
                              },
                              "description": "This appends action taken in case of contain a host failure"
                            }
                          }
                        },
                        "description": "This checks if contain success or not in crowdstrike"
                      },
                      "HTTP_Contain_a_device": {
                        "type": "Http",
                        "inputs": {
                          "method": "POST",
                          "uri": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['FalconHost']}/devices/entities/devices-actions/v2?action_name=contain",
                          "headers": {
                            "Accept": "application/json",
                            "Authorization": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['AccessToken']}",
                            "Content-Type": "application/json"
                          },
                          "body": {
                            "action_parameters": [
                              {
                                "name": "contain"
                              }
                            ],
                            "ids": [
                              "@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}"
                            ]
                          }
                        },
                        "description": "This contains a host in crowdstrike"
                      }
                    }
                  },
                  "Case_-_Ignore": {
                    "case": "Ignore",
                    "actions": {
                      "Append_to_array_variable_in_case_of_ignore_host": {
                        "type": "AppendToArrayVariable",
                        "inputs": {
                          "name": "ActionSummary",
                          "value": {
                            "text": "No actions taken on the host",
                            "type": "TextBlock"
                          }
                        },
                        "description": "This appends action summary to Ignore in case of ignore"
                      },
                      "Append_to_string_variable_action_taken_in_case_of_ignore": {
                        "type": "AppendToStringVariable",
                        "inputs": {
                          "name": "ActionTaken",
                          "value": "No actions taken on the host"
                        },
                        "runAfter": {
                          "Append_to_array_variable_in_case_of_ignore_host": [
                            "Succeeded"
                          ]
                        },
                        "description": "This appends action taken in case of Ignore"
                      }
                    }
                  },
                  "Case_-_Lift_containment": {
                    "case": "Lift Containment",
                    "actions": {
                      "Condition_to_check_if_lift_containment_is_success_or_not": {
                        "type": "If",
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@outputs('HTTP_Lift_containment_on_device')['statusCode']",
                                202
                              ]
                            }
                          ]
                        },
                        "actions": {
                          "Append_to_array_variable_action_summary_in_case_of_lift_containment_successful": {
                            "type": "AppendToArrayVariable",
                            "inputs": {
                              "name": "ActionSummary",
                              "value": {
                                "text": " Containment lifted , Status : Success",
                                "type": "TextBlock"
                              }
                            },
                            "description": "This appends action summary in case of lift containment success"
                          },
                          "Append_to_string_variable_action_taken_in_case_of_lift_containment_success": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "ActionTaken",
                              "value": " Containment lifted , Status : Success"
                            },
                            "runAfter": {
                              "Append_to_array_variable_action_summary_in_case_of_lift_containment_successful": [
                                "Succeeded"
                              ]
                            },
                            "description": "This appends action taken in case of lift containment success"
                          }
                        },
                        "runAfter": {
                          "HTTP_Lift_containment_on_device": [
                            "Succeeded"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Append_to_array_variable_action_summary_in_case_of_lift_containment_failure": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "ActionSummary",
                                "value": {
                                  "text": "Containment not lifted , Status : Failure , Error : @{body('HTTP_Lift_containment_on_device')?['errors']} , Statuscode :  @{outputs('HTTP_Lift_containment_on_device')['statusCode']}",
                                  "type": "TextBlock"
                                }
                              },
                              "description": "This appends action summary in case of lift containment failure"
                            },
                            "Append_to_string_variable_action_taken_in_case_of_lift_containment_failure": {
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "ActionTaken",
                                "value": "  Containment not lifted , Status : Failure , Error : @{body('HTTP_Lift_containment_on_device')?['errors']} , Statuscode :  @{outputs('HTTP_Lift_containment_on_device')['statusCode']}\n"
                              },
                              "runAfter": {
                                "Append_to_array_variable_action_summary_in_case_of_lift_containment_failure": [
                                  "Succeeded"
                                ]
                              },
                              "description": "This appends action taken in case of lift containment failure"
                            }
                          }
                        },
                        "description": "This checks if lift containment success or not from crowdstrike"
                      },
                      "HTTP_Lift_containment_on_device": {
                        "type": "Http",
                        "inputs": {
                          "method": "POST",
                          "uri": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['FalconHost']}/devices/entities/devices-actions/v2?action_name=lift_containment",
                          "headers": {
                            "Accept": "application/json",
                            "Authorization": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['AccessToken']}",
                            "Content-Type": "application/json"
                          },
                          "body": {
                            "action_parameters": [
                              {
                                "name": "lift_containment"
                              }
                            ],
                            "ids": [
                              "@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}"
                            ]
                          }
                        },
                        "description": "This lifts the containment on host in crowdstrike"
                      }
                    }
                  },
                  "Case_-_Run_a_script": {
                    "case": "Run",
                    "actions": {
                      "Condition_to_run_a_script_if_SOC_selects_run_a_script": {
                        "type": "If",
                        "expression": {
                          "and": [
                            {
                              "not": {
                                "equals": [
                                  "@body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']",
                                  "@null"
                                ]
                              }
                            }
                          ]
                        },
                        "actions": {
                          "Condition_to_check_if_session_to_host_is_created_or_not": {
                            "type": "If",
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('HTTP_create_a_session_to_host_to_run_a_script')?['statusCode']",
                                    201
                                  ]
                                }
                              ]
                            },
                            "actions": {
                              "Condition_to_check_if_run_a_script_on_host_is_success_or_not": {
                                "type": "If",
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('HTTP_run_a_script')['statusCode']",
                                        201
                                      ]
                                    }
                                  ]
                                },
                                "actions": {
                                  "Append_to_array_variable_action_summary_if_run_script_success": {
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                      "name": "ActionSummary",
                                      "value": {
                                        "text": "Run script @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']} , Status : Success",
                                        "type": "TextBlock"
                                      }
                                    },
                                    "description": "appends action summary if script run success"
                                  },
                                  "Append_to_string_variable_action_taken_if_run_script_success": {
                                    "type": "AppendToStringVariable",
                                    "inputs": {
                                      "name": "ActionTaken",
                                      "value": "Run script  @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']} and Status : Success"
                                    },
                                    "runAfter": {
                                      "Append_to_array_variable_action_summary_if_run_script_success": [
                                        "Succeeded"
                                      ]
                                    },
                                    "description": "appends action taken if run script success"
                                  }
                                },
                                "runAfter": {
                                  "HTTP_run_a_script": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Append_to_array_variable_action_summary_if_run_script_failed": {
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "ActionSummary",
                                        "value": {
                                          "text": "Run script @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']} , Status : Failure , Error : @{outputs('HTTP_run_a_script')['errors']} , statuscode : @{outputs('HTTP_run_a_script')['statusCode']}",
                                          "type": "TextBlock"
                                        }
                                      },
                                      "description": "appends action summary if script run failed"
                                    },
                                    "Append_to_string_variable_action_taken_if_run_script_failed": {
                                      "type": "AppendToStringVariable",
                                      "inputs": {
                                        "name": "ActionTaken",
                                        "value": "Run script @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']} and Status : Failure  , Error  : @{outputs('HTTP_run_a_script')['errors']} , statuscode : @{outputs('HTTP_run_a_script')['statusCode']}"
                                      },
                                      "runAfter": {
                                        "Append_to_array_variable_action_summary_if_run_script_failed": [
                                          "Succeeded"
                                        ]
                                      },
                                      "description": "appends action taken if run script success"
                                    }
                                  }
                                },
                                "description": "This checks if run a script is success or not"
                              },
                              "HTTP_run_a_script": {
                                "type": "Http",
                                "inputs": {
                                  "method": "POST",
                                  "uri": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['FalconHost']}/real-time-response/entities/admin-command/v1",
                                  "headers": {
                                    "Accept": "application/json",
                                    "Authorization": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['AccessToken']}",
                                    "Content-Type": "application/json"
                                  },
                                  "body": {
                                    "base_command": "runscript",
                                    "command_string": "runscript -CloudFile=@{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']}",
                                    "session_id": "@{body('Parse_JSON_create_a_session_to_a_host')?['resources']?[0]?['session_id']}"
                                  }
                                },
                                "runAfter": {
                                  "Parse_JSON_create_a_session_to_a_host": [
                                    "Succeeded"
                                  ]
                                },
                                "description": "Run a script in crowdstrike host"
                              },
                              "Parse_JSON_create_a_session_to_a_host": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('HTTP_create_a_session_to_host_to_run_a_script')",
                                  "schema": {
                                    "properties": {
                                      "body": {
                                        "properties": {
                                          "meta": {
                                            "properties": {
                                              "powered_by": {
                                                "type": "string"
                                              },
                                              "query_time": {
                                                "type": "number"
                                              },
                                              "trace_id": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "resources": {
                                            "items": {
                                              "properties": {
                                                "created_at": {
                                                  "type": "string"
                                                },
                                                "existing_aid_sessions": {
                                                  "type": "integer"
                                                },
                                                "offline_queued": {
                                                  "type": "boolean"
                                                },
                                                "pwd": {
                                                  "type": "string"
                                                },
                                                "scripts": {
                                                  "items": {
                                                    "properties": {
                                                      "args": {
                                                        "items": {
                                                          "properties": {
                                                            "arg_name": {
                                                              "type": "string"
                                                            },
                                                            "arg_type": {
                                                              "type": "string"
                                                            },
                                                            "command_level": {
                                                              "type": "string"
                                                            },
                                                            "created_at": {
                                                              "type": "string"
                                                            },
                                                            "data_type": {
                                                              "type": "string"
                                                            },
                                                            "default_value": {
                                                              "type": "string"
                                                            },
                                                            "description": {
                                                              "type": "string"
                                                            },
                                                            "encoding": {
                                                              "type": "string"
                                                            },
                                                            "id": {
                                                              "type": "integer"
                                                            },
                                                            "required": {
                                                              "type": "boolean"
                                                            },
                                                            "requires_value": {
                                                              "type": "boolean"
                                                            },
                                                            "script_id": {
                                                              "type": "integer"
                                                            },
                                                            "sequence": {
                                                              "type": "integer"
                                                            },
                                                            "updated_at": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "id",
                                                            "created_at",
                                                            "updated_at",
                                                            "script_id",
                                                            "arg_type",
                                                            "data_type",
                                                            "requires_value",
                                                            "arg_name",
                                                            "description",
                                                            "default_value",
                                                            "required",
                                                            "sequence",
                                                            "options",
                                                            "encoding",
                                                            "command_level"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        "type": "array"
                                                      },
                                                      "command": {
                                                        "type": "string"
                                                      },
                                                      "description": {
                                                        "type": "string"
                                                      },
                                                      "examples": {
                                                        "type": "string"
                                                      },
                                                      "internal_only": {
                                                        "type": "boolean"
                                                      },
                                                      "runnable": {
                                                        "type": "boolean"
                                                      },
                                                      "sub_commands": {
                                                        "type": "array"
                                                      }
                                                    },
                                                    "required": [
                                                      "command",
                                                      "description",
                                                      "examples",
                                                      "internal_only",
                                                      "runnable",
                                                      "sub_commands",
                                                      "args"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "session_id": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "session_id",
                                                "scripts",
                                                "existing_aid_sessions",
                                                "created_at",
                                                "pwd",
                                                "offline_queued"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "headers": {
                                        "properties": {
                                          "Content-Length": {
                                            "type": "string"
                                          },
                                          "Content-Type": {
                                            "type": "string"
                                          },
                                          "Date": {
                                            "type": "string"
                                          },
                                          "Transfer-Encoding": {
                                            "type": "string"
                                          },
                                          "X-Cs-Region": {
                                            "type": "string"
                                          },
                                          "X-Ratelimit-Limit": {
                                            "type": "string"
                                          },
                                          "X-Ratelimit-Remaining": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "statusCode": {
                                        "type": "integer"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "description": "prepare json message for create session to host"
                              }
                            },
                            "runAfter": {
                              "HTTP_create_a_session_to_host_to_run_a_script": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Append_to_array_variable_action_summary_if_session_not_created_to_host": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "ActionSummary",
                                    "value": {
                                      "text": "Script @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']} did not run as not able to establish/create a session to that host , Status : Failure ",
                                      "type": "TextBlock"
                                    }
                                  },
                                  "description": "appends action summary if session not created to host"
                                },
                                "Append_to_string_variable_action_taken_if_session_not_created_to_host": {
                                  "type": "AppendToStringVariable",
                                  "inputs": {
                                    "name": "ActionTaken",
                                    "value": "Script @{body('Post_an_Adaptive_Card_to_a_Teams_channel_and_wait_for_a_response')?['data']?['script']} did not run and Status : Failure  , Error  : Not able to create a session to that host"
                                  },
                                  "runAfter": {
                                    "Append_to_array_variable_action_summary_if_session_not_created_to_host": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "appends action taken if no host session is established"
                                }
                              }
                            },
                            "description": "This checks if session is created or not"
                          },
                          "HTTP_create_a_session_to_host_to_run_a_script": {
                            "type": "Http",
                            "inputs": {
                              "method": "POST",
                              "uri": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['FalconHost']}/real-time-response/entities/sessions/v1",
                              "headers": {
                                "Content-Type": "application/json",
                                "Accept": "application/json",
                                "Authorization": "@{body('CrowdStrike_Base_call_after_SOC_responds')?['AccessToken']}"
                              },
                              "body": {
                                "device_id": "@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}"
                              }
                            },
                            "description": "This creates an RTR session to host in crowdstrike"
                          }
                        },
                        "else": {
                          "actions": {
                            "Append_to_array_variable_action_summary_if_no_scripts_are_selected_to_run": {
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "ActionSummary",
                                "value": {
                                  "text": "No script selected to run ",
                                  "type": "TextBlock"
                                }
                              },
                              "description": "This appends action summary if no script is selected"
                            },
                            "Append_to_string_variable_action_taken_if_no_script_seleted_to_run": {
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "ActionTaken",
                                "value": "No script selected to run"
                              },
                              "runAfter": {
                                "Append_to_array_variable_action_summary_if_no_scripts_are_selected_to_run": [
                                  "Succeeded"
                                ]
                              },
                              "description": "appends action taken if no script selected to run"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "runAfter": {
                  "CrowdStrike_Base_call_after_SOC_responds": [
                    "Succeeded"
                  ]
                },
                "description": "This checks the SOC choice and leas to different actions based on choice"
              }
            },
            "parameters": {
              "$connections": {
                "defaultValue": {},
                "type": "Object"
              }
            },
            "triggers": {
              "When_Azure_Sentinel_incident_creation_rule_was_triggered_(Private_Preview_only)": {
                "type": "ApiConnectionWebhook",
                "inputs": {
                  "body": {
                    "callback_url": "@{listCallbackUrl()}"
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                    }
                  },
                  "path": "/incident-creation"
                }
              }
            },
            "contentVersion": "1.0.0.0",
            "outputs": {}
          },
          "parameters": {
            "$connections": {
              "value": {
                "azuresentinel": {
                  "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook4-AzureSentinelConnectionName'))]",
                  "connectionName": "[variables('playbook4-AzureSentinelConnectionName')]",
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/azuresentinel')]"
                },
                "teams": {
                  "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook4-TeamsConnectionName'))]",
                  "connectionName": "[variables('playbook4-TeamsConnectionName')]",
                  "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/teams')]"
                }
              }
            }
          }
        }
      }
    ],
    "outputs": {}
  }
